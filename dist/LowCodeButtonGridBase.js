/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var LCB;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Exceptions/ButtonException.ts":
/*!*******************************************!*\
  !*** ./src/Exceptions/ButtonException.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExceptionLowCodeButton = void 0;\nvar ExceptionLowCodeButton = /** @class */ (function () {\n    function ExceptionLowCodeButton() {\n    }\n    ExceptionLowCodeButton.buttonSettingNotFound = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button setting not found: \".concat(buttonSettingName),\n                            title: \"Button Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.buttonAdvancedSettingNotFound = function (lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button advanced setting not found for the LCID \".concat(lcid),\n                            title: \"Button Advanced Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.displayGenericErrorNotification = function (title, text) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: text,\n                            title: title,\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ExceptionLowCodeButton;\n}());\nexports.ExceptionLowCodeButton = ExceptionLowCodeButton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Exceptions/ButtonException.ts\n");

/***/ }),

/***/ "./src/Helpers/BaseHelper.ts":
/*!***********************************!*\
  !*** ./src/Helpers/BaseHelper.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseHelper = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ../Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\n/**\n * BaseHelper provides core functionality for determining context type and retrieving\n * configuration objects (button setting and advanced setting) using fetch XML queries.\n */\nvar BaseHelper = /** @class */ (function () {\n    function BaseHelper() {\n    }\n    /**\n     * Determines the button location based on the provided context.\n     * - If the context is a FormContext, sets containerType to \"form\" and stores it.\n     * - If the context is a GridControl, sets containerType to \"grid\" or \"subgrid\"\n     *   depending on whether getParent() returns a non-null value.\n     *\n     * @param context - Either a FormContext or a GridControl.\n     */\n    BaseHelper.prototype.getButtonLocation = function (context) {\n        if (context) {\n            if (typeof context.data === \"object\") {\n                this.formContext = context;\n                this.containerType = \"form\";\n            }\n            else if (typeof context.getGrid === \"function\") {\n                this.gridControl = context;\n                if (typeof this.gridControl.getParent === \"function\" && this.gridControl.getParent() !== null) {\n                    this.containerType = \"subgrid\";\n                }\n                else {\n                    this.containerType = \"grid\";\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves the current user's language code from the global context.\n     *\n     * @returns The language code.\n     */\n    BaseHelper.prototype.getLanguageCode = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.languageId;\n    };\n    /**\n     * Retrieves the current user's ID as a lowercase string with curly braces removed.\n     *\n     * @returns The user ID.\n     */\n    BaseHelper.prototype.getUserID = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.userId.replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase();\n    };\n    /**\n     * Retrieves the Entity Plural Name for the provided entity logical name.\n     *\n     * @returns The Entity Plural Name.\n     */\n    BaseHelper.prototype.getEntityPluralName = function (entity) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Xrm.Utility.getEntityMetadata(entity)];\n                    case 1:\n                        name = _a.sent();\n                        return [2 /*return*/, name.EntitySetName];\n                }\n            });\n        });\n    };\n    /**\n     * Makes an HTTP request using fetch with pre-configured headers.\n     *\n     * @param method - The HTTP method (e.g., \"GET\", \"POST\").\n     * @param url - The URL to send the request to.\n     * @param body - Optional request body.\n     * @returns A Promise that resolves to the Response.\n     */\n    BaseHelper.prototype.makeRequest = function (method, url, body) {\n        return __awaiter(this, void 0, void 0, function () {\n            var headers, options;\n            return __generator(this, function (_a) {\n                headers = {\n                    \"Content-Type\": \"application/json\",\n                    \"OData-MaxVersion\": \"4.0\",\n                    \"OData-Version\": \"4.0\",\n                    Accept: \"application/json\",\n                    Prefer: \"odata.include-annotations=*\",\n                };\n                options = {\n                    method: method,\n                    headers: headers,\n                    body: body ? JSON.stringify(body) : undefined,\n                };\n                return [2 /*return*/, fetch(url, options)];\n            });\n        });\n    };\n    /**\n     * Retrieves the button setting record using the provided button setting name.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     * @returns A Promise that resolves to the esp_ButtonSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonSetting = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, setting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonsetting\\\">\\n          <attribute name=\\\"esp_buttonsettingid\\\" />\\n          <attribute name=\\\"esp_buttonlocation\\\" />\\n          <attribute name=\\\"esp_endpoint\\\" />\\n          <attribute name=\\\"esp_includecallinguseridinpayload\\\" />\\n          <attribute name=\\\"esp_includeentitylogicalnameinpayload\\\" />\\n          <attribute name=\\\"esp_includerecordidinpayload\\\" />\\n          <attribute name=\\\"esp_buttonname\\\" />\\n          <attribute name=\\\"esp_savebeforerunning\\\" />\\n          <attribute name=\\\"esp_refreshwhenapicallends\\\" />\\n          <filter type=\\\"and\\\">\\n            <condition attribute=\\\"esp_buttonname\\\" operator=\\\"eq\\\" value=\\\"\".concat(buttonSettingName, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        setting = data.value[0];\n                        this.buttonSetting = setting;\n                        return [2 /*return*/, setting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonSettingNotFound(buttonSettingName);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the advanced button setting record using the main button setting ID and language code.\n     *\n     * @param mainButtonSettingId - The ID of the main button setting.\n     * @param lcid - The language code.\n     * @returns A Promise that resolves to the esp_ButtonAdvancedSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonAdvancedSetting = function (mainButtonSettingId, lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, advancedSetting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n          </filter>\\n          <link-entity name=\\\"esp_language\\\" from=\\\"esp_languageid\\\" to=\\\"esp_settinglanguage\\\" link-type=\\\"inner\\\">\\n            <filter>\\n              <condition attribute=\\\"esp_lcid\\\" operator=\\\"eq\\\" value=\\\"\").concat(lcid, \"\\\" />\\n            </filter>\\n          </link-entity>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        advancedSetting = data.value[0];\n                        this.buttonAdvancedSetting = advancedSetting;\n                        return [2 /*return*/, advancedSetting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonAdvancedSettingNotFound(lcid);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves all advanced button settings except the given LCID.\n     *\n     * @param mainButtonSettingId - The ID of the main button setting.\n     * @param languageId - The language code to exclude.\n     * @returns A Promise that resolves to an array of esp_ButtonAdvancedSetting.\n     */\n    BaseHelper.prototype.getAllButtonAdvancedSettingExceptTheGivenLCID = function (mainButtonSettingId, languageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch>\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n            <condition attribute=\\\"esp_settinglanguage\\\" operator=\\\"ne\\\" value=\\\"\").concat(languageId, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        return [2 /*return*/, data.value];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error\", \"Error while fetching the advanced button settings except the given LCID. Function name: getAllButtonAdvancedSettingExceptTheGivenLCID\");\n                        return [2 /*return*/, []];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Provides the filter for the lookup field in the advanced button setting form, which filters out the other existing advanced button settings for the same button setting, avoiding letting you choose a duplicate language.\n     *\n     * @param buttonAdvancedSetting - The advanced button setting to use for the query.\n     * @returns A Promise that resolves to the ID of the advanced button setting.\n     */\n    BaseHelper.prototype.getFilterLookupForLanguage = function (mainButtonSettingId, languageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allButtonAdvancedSettings, filter;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAllButtonAdvancedSettingExceptTheGivenLCID(mainButtonSettingId, languageId)];\n                    case 1:\n                        allButtonAdvancedSettings = _a.sent();\n                        filter = allButtonAdvancedSettings.map(function (setting) {\n                            return \"<condition attribute=\\\"esp_buttonadvancedsettingid\\\" operator=\\\"ne\\\" value=\\\"\".concat(setting.esp_buttonadvancedsettingid, \"\\\" />\");\n                        });\n                        debugger;\n                        return [2 /*return*/, \"<filter type='and'>\" + filter.join(\"\") + \"</filter>\"];\n                }\n            });\n        });\n    };\n    /**\n     * Initializes settings by retrieving the button setting (using its name) and then the advanced button setting.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     */\n    BaseHelper.prototype.initializeSettings = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var setting;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getButtonSetting(buttonSettingName)];\n                    case 1:\n                        setting = _a.sent();\n                        if (!setting) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.getButtonAdvancedSetting(setting.esp_buttonsettingid, this.getLanguageCode())];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BaseHelper;\n}());\nexports.BaseHelper = BaseHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Helpers/BaseHelper.ts\n");

/***/ }),

/***/ "./src/Helpers/ButtonGridHelper.ts":
/*!*****************************************!*\
  !*** ./src/Helpers/ButtonGridHelper.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ButtonGridHelper = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ../Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\nvar BaseHelper_1 = __webpack_require__(/*! ./BaseHelper */ \"./src/Helpers/BaseHelper.ts\");\n/**\n * ButtonGridHelper extends BaseHelper to provide grid-specific functionality.\n * It builds payloads with selected record GUIDs and handles grid notifications.\n */\nvar ButtonGridHelper = /** @class */ (function (_super) {\n    __extends(ButtonGridHelper, _super);\n    /**\n     * Constructs a new ButtonGridHelper instance with the provided grid control.\n     * @param selectedContext - The grid control representing the selected context.\n     */\n    function ButtonGridHelper(selectedContext) {\n        var _this = _super.call(this) || this;\n        _this.getButtonLocation(selectedContext);\n        return _this;\n    }\n    /**\n     * Returns an array containing the GUIDs of the selected records.\n     * @returns An array of selected record GUIDs as lowercase strings.\n     * @throws Error if the grid control is not set.\n     */\n    ButtonGridHelper.prototype.getSelectedRecordIds = function () {\n        if (!this.gridControl) {\n            throw new Error(\"Grid control is not set.\");\n        }\n        var selectedRows = this.gridControl.getGrid().getSelectedRows();\n        var recordIds = [];\n        selectedRows.forEach(function (row) {\n            recordIds.push(row.data.entity.getId().replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase());\n        });\n        return recordIds;\n    };\n    /**\n     * Returns the logical name of the entity displayed in the grid.\n     * @returns The entity logical name.\n     * @throws Error if the grid control is not set.\n     */\n    ButtonGridHelper.prototype.getEntityLogicalName = function () {\n        if (!this.gridControl) {\n            throw new Error(\"Grid control is not set.\");\n        }\n        return this.gridControl.getEntityName();\n    };\n    /**\n     * Validates that at least one record is selected in the grid.\n     * @returns A Promise that resolves if selection is valid.\n     * @throws ExceptionLowCodeButton if no records are selected.\n     */\n    ButtonGridHelper.prototype.validateSelection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var selectedRows;\n            return __generator(this, function (_a) {\n                if (!this.gridControl) {\n                    throw new Error(\"Grid control is not set.\");\n                }\n                selectedRows = this.gridControl.getGrid().getSelectedRows();\n                if (selectedRows.getLength() === 0) {\n                    void ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"No Records selected\", \"No records selected. Please select at least one record.\");\n                    return [2 /*return*/, Promise.reject()];\n                }\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Builds a payload for grid actions.\n     * The payload includes the entity logical name, the plural name (if configured),\n     * selected record GUIDs, and the calling user ID.\n     * If in a subgrid, additional parent entity information is included.\n     * @returns A Promise resolving to an object containing the payload data.\n     * @throws Error if the grid control or button setting is not set.\n     */\n    ButtonGridHelper.prototype.getPayload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var payload, _a, parentFormContext, _b, parentFormContext;\n            var _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!this.gridControl || !this.buttonSetting) {\n                            throw new Error(\"Grid control or button setting is not set.\");\n                        }\n                        payload = {};\n                        if (!this.buttonSetting.esp_includeentitylogicalnameinpayload) return [3 /*break*/, 3];\n                        payload = __assign(__assign({}, payload), { entityLogicalName: this.gridControl.getEntityName() });\n                        _a = [__assign({}, payload)];\n                        _c = {};\n                        return [4 /*yield*/, this.getEntityPluralName(this.getEntityLogicalName())];\n                    case 1:\n                        payload = __assign.apply(void 0, _a.concat([(_c.entityLogicalPluralName = _e.sent(), _c)]));\n                        if (!(this.containerType === \"subgrid\")) return [3 /*break*/, 3];\n                        parentFormContext = this.getFormContextInSubgrid();\n                        if (!parentFormContext) return [3 /*break*/, 3];\n                        payload = __assign(__assign({}, payload), { parentEntityLogicalName: parentFormContext.data.entity.getEntityName() });\n                        _b = [__assign({}, payload)];\n                        _d = {};\n                        return [4 /*yield*/, this.getEntityPluralName(parentFormContext.data.entity.getEntityName())];\n                    case 2:\n                        payload = __assign.apply(void 0, _b.concat([(_d.parentEntityLogicalPluralName = _e.sent(), _d)]));\n                        _e.label = 3;\n                    case 3:\n                        if (this.buttonSetting.esp_includerecordidinpayload) {\n                            payload = __assign(__assign({}, payload), { recordIds: this.getSelectedRecordIds() });\n                            if (this.containerType === \"subgrid\") {\n                                parentFormContext = this.getFormContextInSubgrid();\n                                if (parentFormContext) {\n                                    payload = __assign(__assign({}, payload), { parentRecordId: parentFormContext.data.entity.getId().replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase() });\n                                }\n                            }\n                        }\n                        if (this.buttonSetting.esp_includecallinguseridinpayload) {\n                            payload = __assign(__assign({}, payload), { userId: this.getUserID() });\n                        }\n                        return [2 /*return*/, payload];\n                }\n            });\n        });\n    };\n    /**\n     * Opens a confirmation dialog before executing the grid action.\n     * @returns A Promise that resolves to true if the user confirms the dialog, false otherwise.\n     */\n    ButtonGridHelper.prototype.openConfirmationDialogBeforeRun = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var confirmStrings, result;\n            var _a, _b, _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!(!this.buttonAdvancedSetting || this.buttonAdvancedSetting.esp_confirmationdialogtext == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Confirmation Dialog Text Error\", \"The confirmation dialog text is empty! Please fill it on your configuration settings.\")];\n                    case 1:\n                        _e.sent();\n                        return [2 /*return*/, false];\n                    case 2:\n                        confirmStrings = {\n                            cancelButtonLabel: (_a = this.buttonAdvancedSetting.esp_confirmationdialogcancellabel) !== null && _a !== void 0 ? _a : \"\",\n                            confirmButtonLabel: (_b = this.buttonAdvancedSetting.esp_confirmationdialogconfirmlabel) !== null && _b !== void 0 ? _b : \"\",\n                            subtitle: (_c = this.buttonAdvancedSetting.esp_confirmationdialogsubtitle) !== null && _c !== void 0 ? _c : \"\",\n                            text: (_d = this.buttonAdvancedSetting.esp_confirmationdialogtext) !== null && _d !== void 0 ? _d : \"\",\n                            title: this.buttonAdvancedSetting.esp_confirmationdialogtitle,\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openConfirmDialog(confirmStrings)];\n                    case 3:\n                        result = _e.sent();\n                        return [2 /*return*/, result.confirmed];\n                }\n            });\n        });\n    };\n    /**\n     * Displays an asynchronous grid notification for 5 seconds using global notifications.\n     * @returns A Promise that resolves when the notification is cleared.\n     */\n    ButtonGridHelper.prototype.asyncGridNotification = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var notification;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!this.buttonAdvancedSetting || this.buttonAdvancedSetting.esp_asyncformnotificationtext == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Async Grid Notification Text Error\", \"The async grid notification text is empty! Please fill it on your configuration settings.\")];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        notification = {\n                            level: 4 /* XrmEnum.AppNotificationLevel.Information */,\n                            message: this.buttonAdvancedSetting.esp_asyncformnotificationtext,\n                            type: 2,\n                            showCloseButton: true,\n                        };\n                        Xrm.App.addGlobalNotification(notification).then(function (id) {\n                            _this.globalNotificationId = id;\n                            setTimeout(function () {\n                                _this.clearGridNotification();\n                            }, 5000);\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears the grid notification using the stored global notification ID.\n     * @throws Error if no notification is currently set.\n     */\n    ButtonGridHelper.prototype.clearGridNotification = function () {\n        if (this.globalNotificationId) {\n            Xrm.App.clearGlobalNotification(this.globalNotificationId);\n            this.globalNotificationId = undefined;\n        }\n    };\n    /**\n     * Displays a synchronous grid notification for 120 seconds using global notifications.\n     * @returns A Promise that resolves when the notification is cleared.\n     */\n    ButtonGridHelper.prototype.syncGridNotification = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var notification;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!this.buttonAdvancedSetting || this.buttonAdvancedSetting.esp_syncformnotificationtext == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Sync Grid Notification Text Error\", \"The sync grid notification text is empty! Please fill it on your configuration settings.\")];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        notification = {\n                            level: 4 /* XrmEnum.AppNotificationLevel.Information */,\n                            message: this.buttonAdvancedSetting.esp_syncformnotificationtext,\n                            type: 2,\n                        };\n                        Xrm.App.addGlobalNotification(notification).then(function (id) {\n                            _this.globalNotificationId = id;\n                            setTimeout(function () {\n                                _this.clearGridNotification();\n                            }, 120000);\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all synchronous notifications, including grid notifications and progress indicators.\n     * @returns A Promise that resolves when the notifications are cleared.\n     */\n    ButtonGridHelper.prototype.clearSyncNotifications = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!((_a = this.buttonAdvancedSetting) === null || _a === void 0 ? void 0 : _a.esp_syncformnotification)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.clearGridNotification()];\n                    case 1:\n                        _c.sent();\n                        _c.label = 2;\n                    case 2:\n                        if ((_b = this.buttonAdvancedSetting) === null || _b === void 0 ? void 0 : _b.esp_syncspinner) {\n                            Xrm.Utility.closeProgressIndicator();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Displays a success grid notification for 5 seconds using global notifications.\n     * @returns A Promise that resolves when the notification is cleared.\n     */\n    ButtonGridHelper.prototype.showSuccessGridNotification = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var notification;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!this.gridControl ||\n                            !this.buttonAdvancedSetting ||\n                            this.buttonAdvancedSetting.esp_syncsuccessformnotificationtext == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Success Notification Text Error\", \"The success notification text is empty! Please fill it on your configuration settings.\\nField: esp_syncsuccessformnotificationtext\")];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        notification = {\n                            level: 4 /* XrmEnum.AppNotificationLevel.Information */,\n                            message: this.buttonAdvancedSetting.esp_syncsuccessformnotificationtext,\n                            type: 2,\n                            showCloseButton: true,\n                        };\n                        Xrm.App.addGlobalNotification(notification).then(function (id) {\n                            _this.globalNotificationId = id;\n                            setTimeout(function () {\n                                _this.clearGridNotification();\n                            }, 5000);\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Opens a synchronous success dialog and awaits the user's confirmation.\n     * @returns A Promise that resolves to true if the success dialog is confirmed, or false otherwise.\n     */\n    ButtonGridHelper.prototype.openSuccessDialogSync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var confirmStrings, result;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!(!this.buttonAdvancedSetting || this.buttonAdvancedSetting.esp_syncconfirmationboxtext == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Sync Confirmation Box Text Error\", \"The sync confirmation box text is empty! Please fill it on your configuration settings.\")];\n                    case 1:\n                        _c.sent();\n                        return [2 /*return*/, false];\n                    case 2:\n                        confirmStrings = {\n                            confirmButtonLabel: (_a = this.buttonAdvancedSetting.esp_syncconfirmationboxconfirmlabel) !== null && _a !== void 0 ? _a : undefined,\n                            text: (_b = this.buttonAdvancedSetting.esp_syncconfirmationboxtext) !== null && _b !== void 0 ? _b : undefined,\n                            title: this.buttonAdvancedSetting.esp_syncconfirmationboxtitle,\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(confirmStrings)];\n                    case 3:\n                        result = _c.sent();\n                        return [2 /*return*/, result.confirmed];\n                }\n            });\n        });\n    };\n    /**\n     * Opens a success dialog that may redirect the user based on their confirmation.\n     * If confirmed, the browser is redirected; otherwise, the grid is reloaded.\n     * @param response - An object containing the redirect URI.\n     */\n    ButtonGridHelper.prototype.openSuccessDialogRedirect = function (response) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        if (!this.buttonAdvancedSetting) {\n            throw new Error(\"Button advanced setting is not set.\");\n        }\n        if (this.buttonAdvancedSetting.esp_syncconfirmationboxredirecttext == null) {\n            ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Sync Confirmation Box Redirect Text Error\", \"The sync confirmation box redirect text is empty! Please fill it on your configuration settings.\");\n            return;\n        }\n        var confirmStrings = {\n            cancelButtonLabel: (_a = this.buttonAdvancedSetting.esp_syncconfirmationboxredirectcancellabel) !== null && _a !== void 0 ? _a : undefined,\n            confirmButtonLabel: (_b = this.buttonAdvancedSetting.esp_syncconfirmationboxredirectconfirmlabel) !== null && _b !== void 0 ? _b : undefined,\n            text: this.buttonAdvancedSetting.esp_syncconfirmationboxredirecttext,\n            subtitle: (_c = this.buttonAdvancedSetting.esp_syncconfirmationboxredirectsubtitle) !== null && _c !== void 0 ? _c : undefined,\n            title: (_d = this.buttonAdvancedSetting.esp_syncconfirmationboxredirecttitle) !== null && _d !== void 0 ? _d : undefined,\n        };\n        Xrm.Navigation.openConfirmDialog(confirmStrings).then(function (result) {\n            if (result.confirmed) {\n                console.log(\"User confirmed the dialog, redirecting...\");\n                if (_this.buttonAdvancedSetting.esp_syncconfirmationboxredirectmode ===\n                    1 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_syncconfirmationboxredirectmode.CurrentTab */) {\n                    window.open(response.redirectUri, \"_self\").focus();\n                }\n                else {\n                    window.open(response.redirectUri, \"_blank\").focus();\n                }\n            }\n            else {\n                console.log(\"User cancelled the dialog, refreshing the grid.\");\n                _this.reloadGrid();\n            }\n        });\n    };\n    /**\n     * Reloads the grid and, if in a subgrid, reloads the parent form.\n     */\n    ButtonGridHelper.prototype.reloadGrid = function () {\n        if (!this.gridControl || !this.buttonSetting || !this.buttonAdvancedSetting) {\n            throw new Error(\"Required properties are not set for reloading the grid.\");\n        }\n        if (this.buttonSetting.esp_refreshwhenapicallends &&\n            !(this.buttonAdvancedSetting.esp_syncconfirmationboxredirect &&\n                this.buttonAdvancedSetting.esp_syncconfirmationboxredirectmode ===\n                    1 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_syncconfirmationboxredirectmode.CurrentTab */)) {\n            this.gridControl.refresh();\n        }\n        if (this.containerType === \"subgrid\") {\n            this.reloadForm();\n        }\n    };\n    /**\n     * Reloads the parent form for subgrid contexts.\n     * @returns The parent form context if available.\n     * @throws Error if required properties are not set or the container is not a subgrid.\n     */\n    ButtonGridHelper.prototype.reloadForm = function () {\n        if (!this.formContext || !this.buttonSetting || !this.buttonAdvancedSetting || this.containerType !== \"subgrid\") {\n            throw new Error(\"Required properties are not set for reloading the form.\");\n        }\n        if (this.buttonSetting.esp_refreshwhenapicallends &&\n            !(this.buttonAdvancedSetting.esp_syncconfirmationboxredirect &&\n                this.buttonAdvancedSetting.esp_syncconfirmationboxredirectmode ===\n                    1 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_syncconfirmationboxredirectmode.CurrentTab */)) {\n            this.formContext.data.refresh(false);\n        }\n    };\n    /**\n     * Retrieves the parent form context when the grid is embedded as a subgrid.\n     * @returns The parent form context or null if not available.\n     */\n    ButtonGridHelper.prototype.getFormContextInSubgrid = function () {\n        if (this.buttonSetting.esp_buttonlocation === 789620002 /* esp_buttonsetting_esp_buttonsetting_esp_buttonlocation.Subgrid */ &&\n            this.containerType === \"subgrid\") {\n            console.log(\"Subgrid detected. Setting form context to parent form.\");\n            // Cast gridControl as any to access the formContext property.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var tempControl = this.gridControl;\n            return tempControl.formContext;\n        }\n        return null;\n    };\n    return ButtonGridHelper;\n}(BaseHelper_1.BaseHelper));\nexports.ButtonGridHelper = ButtonGridHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Helpers/ButtonGridHelper.ts\n");

/***/ }),

/***/ "./src/LowCodeButtonGridBase.ts":
/*!**************************************!*\
  !*** ./src/LowCodeButtonGridBase.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ButtonRegistrationGrid = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ./Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\nvar ButtonGridHelper_1 = __webpack_require__(/*! ./Helpers/ButtonGridHelper */ \"./src/Helpers/ButtonGridHelper.ts\");\nvar BaseButtonResponseModels_1 = __webpack_require__(/*! ./Models/BaseButtonResponseModels */ \"./src/Models/BaseButtonResponseModels.ts\");\nvar ButtonRegistrationGrid = /** @class */ (function () {\n    function ButtonRegistrationGrid() {\n    }\n    /**\n     * Handles the onClick event for grid buttons.\n     * @param gridControl - The grid control representing the selected records.\n     * @param buttonSettingName - The name of the button setting.\n     */\n    ButtonRegistrationGrid.onClick = function (gridControl, buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var buttonHelper, confirmation;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        buttonHelper = new ButtonGridHelper_1.ButtonGridHelper(gridControl);\n                        return [4 /*yield*/, buttonHelper.initializeSettings(buttonSettingName)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, buttonHelper.validateSelection()];\n                    case 2:\n                        if (_a.sent()) {\n                            return [2 /*return*/];\n                        }\n                        if (!buttonHelper.buttonAdvancedSetting.esp_showconfirmationdialog) return [3 /*break*/, 4];\n                        return [4 /*yield*/, buttonHelper.openConfirmationDialogBeforeRun()];\n                    case 3:\n                        confirmation = _a.sent();\n                        if (!confirmation) {\n                            return [2 /*return*/];\n                        }\n                        _a.label = 4;\n                    case 4:\n                        if (!!buttonHelper.buttonSetting.esp_endpoint) return [3 /*break*/, 6];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Endpoint Not Set\", \"The endpoint for the button is not set. Please set it up in the button settings.\")];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 6:\n                        if (!(buttonHelper.buttonAdvancedSetting.esp_executionmode ===\n                            1 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_executionmode.Async */)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, this.executeAsync(buttonHelper)];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 10];\n                    case 8: return [4 /*yield*/, this.executeSync(buttonHelper)];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes an asynchronous HTTP call for grid actions.\n     * @param buttonHelper - The initialized ButtonGridHelper instance.\n     */\n    ButtonRegistrationGrid.executeAsync = function (buttonHelper) {\n        return __awaiter(this, void 0, void 0, function () {\n            var buttonSetting, buttonAdvancedSetting, _a, _b, _c;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        buttonSetting = buttonHelper.buttonSetting, buttonAdvancedSetting = buttonHelper.buttonAdvancedSetting;\n                        console.log(\"Executing async call to \".concat(buttonSetting === null || buttonSetting === void 0 ? void 0 : buttonSetting.esp_endpoint));\n                        if (buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_asyncformnotification) {\n                            void buttonHelper.asyncGridNotification();\n                        }\n                        _b = (_a = buttonHelper)\n                            .makeRequest;\n                        _c = [\"POST\", buttonSetting.esp_endpoint];\n                        return [4 /*yield*/, buttonHelper.getPayload()];\n                    case 1:\n                        _b.apply(_a, _c.concat([_d.sent()]))\n                            .catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error during HTTP Call\", error.message)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes a synchronous HTTP call for grid actions.\n     * @param buttonHelper - The initialized ButtonGridHelper instance.\n     */\n    ButtonRegistrationGrid.executeSync = function (buttonHelper) {\n        return __awaiter(this, void 0, void 0, function () {\n            var buttonSetting, buttonAdvancedSetting, response, _a, _b, _c, errorMessage, _d, _e, errorText, redirectResponse, _f, _g;\n            var _this = this;\n            var _h, _j;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        buttonSetting = buttonHelper.buttonSetting, buttonAdvancedSetting = buttonHelper.buttonAdvancedSetting;\n                        console.log(\"Executing sync call to \".concat(buttonSetting === null || buttonSetting === void 0 ? void 0 : buttonSetting.esp_endpoint));\n                        if (!(buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncformnotification)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, buttonHelper.syncGridNotification()];\n                    case 1:\n                        _k.sent();\n                        _k.label = 2;\n                    case 2:\n                        if (!(buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncspinner)) return [3 /*break*/, 5];\n                        if (!!buttonAdvancedSetting.esp_syncspinnertext) return [3 /*break*/, 4];\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Sync Spinner Text Error\", \"The sync spinner text is empty! Please fill it on your configuration settings.\")];\n                    case 3:\n                        _k.sent();\n                        return [2 /*return*/];\n                    case 4:\n                        Xrm.Utility.showProgressIndicator(buttonAdvancedSetting.esp_syncspinnertext);\n                        _k.label = 5;\n                    case 5:\n                        _b = (_a = buttonHelper)\n                            .makeRequest;\n                        _c = [\"POST\", buttonSetting.esp_endpoint];\n                        return [4 /*yield*/, buttonHelper.getPayload()];\n                    case 6: return [4 /*yield*/, _b.apply(_a, _c.concat([_k.sent()]))\n                            .catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error during HTTP Call\", error.message)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })\n                            .finally(function () {\n                            if (buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncspinner) {\n                                Xrm.Utility.closeProgressIndicator();\n                            }\n                            if (buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncformnotification) {\n                                void buttonHelper.clearGridNotification();\n                            }\n                        })];\n                    case 7:\n                        response = _k.sent();\n                        if (!response)\n                            return [2 /*return*/];\n                        if (!(response.status === 400)) return [3 /*break*/, 10];\n                        _e = (_d = BaseButtonResponseModels_1.ErrorMessageResponse).fromJson;\n                        return [4 /*yield*/, response.text()];\n                    case 8:\n                        errorMessage = _e.apply(_d, [_k.sent()]);\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(errorMessage.title, errorMessage.message)];\n                    case 9:\n                        _k.sent();\n                        return [2 /*return*/];\n                    case 10:\n                        if (!(((_h = response.status) !== null && _h !== void 0 ? _h : 500) >= 500)) return [3 /*break*/, 13];\n                        return [4 /*yield*/, response.text()];\n                    case 11:\n                        errorText = (_j = (_k.sent())) !== null && _j !== void 0 ? _j : \"An error occurred on the server. Please try again later.\";\n                        return [4 /*yield*/, ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error during HTTP Call\", \"Error code: \".concat(response.status, \"\\n\").concat(errorText))];\n                    case 12:\n                        _k.sent();\n                        return [2 /*return*/];\n                    case 13:\n                        if (!(response.status === 200)) return [3 /*break*/, 20];\n                        buttonHelper.clearSyncNotifications();\n                        if (!(buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncsuccessformnotification)) return [3 /*break*/, 15];\n                        return [4 /*yield*/, buttonHelper.showSuccessGridNotification()];\n                    case 14:\n                        _k.sent();\n                        _k.label = 15;\n                    case 15:\n                        if (!((buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncconfirmationboxtype) ===\n                            0 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_syncconfirmationboxtype.Default */)) return [3 /*break*/, 17];\n                        return [4 /*yield*/, buttonHelper.openSuccessDialogSync()];\n                    case 16:\n                        _k.sent();\n                        _k.label = 17;\n                    case 17:\n                        if (!((buttonAdvancedSetting === null || buttonAdvancedSetting === void 0 ? void 0 : buttonAdvancedSetting.esp_syncconfirmationboxtype) ===\n                            1 /* esp_buttonadvancedsetting_esp_buttonadvancedsetting_esp_syncconfirmationboxtype.Redirect */)) return [3 /*break*/, 19];\n                        _g = (_f = BaseButtonResponseModels_1.RedirectResponse).fromJson;\n                        return [4 /*yield*/, response.text()];\n                    case 18:\n                        redirectResponse = _g.apply(_f, [_k.sent()]);\n                        buttonHelper.openSuccessDialogRedirect(redirectResponse);\n                        _k.label = 19;\n                    case 19:\n                        buttonHelper.reloadGrid();\n                        _k.label = 20;\n                    case 20: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ButtonRegistrationGrid;\n}());\nexports.ButtonRegistrationGrid = ButtonRegistrationGrid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LowCodeButtonGridBase.ts\n");

/***/ }),

/***/ "./src/Models/BaseButtonResponseModels.ts":
/*!************************************************!*\
  !*** ./src/Models/BaseButtonResponseModels.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ErrorMessageResponse = exports.RedirectResponse = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ../Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\n/**\n * RedirectResponse encapsulates a redirect URI.\n */\nvar RedirectResponse = /** @class */ (function () {\n    /**\n     * Creates a new instance of RedirectResponse.\n     * @param redirectUri - The URI to which the user should be redirected.\n     */\n    function RedirectResponse(redirectUri) {\n        this.redirectUri = redirectUri;\n    }\n    /**\n     * Parses a JSON string to create a RedirectResponse instance.\n     * Expects the JSON to contain a \"redirectUri\" property of type string.\n     * If the property is missing or invalid, displays a generic error notification\n     * and throws an error.\n     *\n     * @param json - The JSON string to parse.\n     * @returns A new RedirectResponse instance.\n     * @throws Error if the JSON format is invalid or \"redirectUri\" is not a string.\n     */\n    RedirectResponse.fromJson = function (json) {\n        var data = JSON.parse(json);\n        if (typeof data.redirectUri !== \"string\") {\n            ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Redirect URI Not Found\", \"The redirect URI was not found in the response.\");\n            throw new Error(\"Invalid JSON format for RedirectResponse\");\n        }\n        return new RedirectResponse(data.redirectUri);\n    };\n    return RedirectResponse;\n}());\nexports.RedirectResponse = RedirectResponse;\n/**\n * ErrorMessageResponse encapsulates an error message along with an optional title.\n */\nvar ErrorMessageResponse = /** @class */ (function () {\n    /**\n     * Creates a new instance of ErrorMessageResponse.\n     * @param message - The error message.\n     * @param title - An optional title for the error.\n     */\n    function ErrorMessageResponse(message, title) {\n        this.message = message;\n        this.title = title;\n    }\n    /**\n     * Parses a JSON string to create an ErrorMessageResponse instance.\n     * Expects the JSON to contain a \"message\" property of type string.\n     * If the property is missing or invalid, displays a generic error notification\n     * and throws an error.\n     *\n     * @param json - The JSON string to parse.\n     * @returns A new ErrorMessageResponse instance.\n     * @throws Error if the JSON format is invalid or \"message\" is not a string.\n     */\n    ErrorMessageResponse.fromJson = function (json) {\n        var _a;\n        var data = JSON.parse(json);\n        console.log(\"Error message data\", data);\n        if (typeof data.message !== \"string\") {\n            ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error Message Not Found\", \"The error message was not found in the response.\");\n            throw new Error(\"Invalid JSON format for ErrorMessage\");\n        }\n        return new ErrorMessageResponse(data.message, (_a = data.title) !== null && _a !== void 0 ? _a : \"\");\n    };\n    return ErrorMessageResponse;\n}());\nexports.ErrorMessageResponse = ErrorMessageResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTW9kZWxzL0Jhc2VCdXR0b25SZXNwb25zZU1vZGVscy50cyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRyx3QkFBd0I7QUFDdkQsd0JBQXdCLG1CQUFPLENBQUMsMEVBQStCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTENCLy4vc3JjL01vZGVscy9CYXNlQnV0dG9uUmVzcG9uc2VNb2RlbHMudHM/YTU3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXJyb3JNZXNzYWdlUmVzcG9uc2UgPSBleHBvcnRzLlJlZGlyZWN0UmVzcG9uc2UgPSB2b2lkIDA7XG52YXIgQnV0dG9uRXhjZXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vRXhjZXB0aW9ucy9CdXR0b25FeGNlcHRpb25cIik7XG4vKipcbiAqIFJlZGlyZWN0UmVzcG9uc2UgZW5jYXBzdWxhdGVzIGEgcmVkaXJlY3QgVVJJLlxuICovXG52YXIgUmVkaXJlY3RSZXNwb25zZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlZGlyZWN0UmVzcG9uc2UuXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpIC0gVGhlIFVSSSB0byB3aGljaCB0aGUgdXNlciBzaG91bGQgYmUgcmVkaXJlY3RlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWRpcmVjdFJlc3BvbnNlKHJlZGlyZWN0VXJpKSB7XG4gICAgICAgIHRoaXMucmVkaXJlY3RVcmkgPSByZWRpcmVjdFVyaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgSlNPTiBzdHJpbmcgdG8gY3JlYXRlIGEgUmVkaXJlY3RSZXNwb25zZSBpbnN0YW5jZS5cbiAgICAgKiBFeHBlY3RzIHRoZSBKU09OIHRvIGNvbnRhaW4gYSBcInJlZGlyZWN0VXJpXCIgcHJvcGVydHkgb2YgdHlwZSBzdHJpbmcuXG4gICAgICogSWYgdGhlIHByb3BlcnR5IGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgZGlzcGxheXMgYSBnZW5lcmljIGVycm9yIG5vdGlmaWNhdGlvblxuICAgICAqIGFuZCB0aHJvd3MgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ganNvbiAtIFRoZSBKU09OIHN0cmluZyB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBSZWRpcmVjdFJlc3BvbnNlIGluc3RhbmNlLlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIEpTT04gZm9ybWF0IGlzIGludmFsaWQgb3IgXCJyZWRpcmVjdFVyaVwiIGlzIG5vdCBhIHN0cmluZy5cbiAgICAgKi9cbiAgICBSZWRpcmVjdFJlc3BvbnNlLmZyb21Kc29uID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEucmVkaXJlY3RVcmkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIEJ1dHRvbkV4Y2VwdGlvbl8xLkV4Y2VwdGlvbkxvd0NvZGVCdXR0b24uZGlzcGxheUdlbmVyaWNFcnJvck5vdGlmaWNhdGlvbihcIlJlZGlyZWN0IFVSSSBOb3QgRm91bmRcIiwgXCJUaGUgcmVkaXJlY3QgVVJJIHdhcyBub3QgZm91bmQgaW4gdGhlIHJlc3BvbnNlLlwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBmb3JtYXQgZm9yIFJlZGlyZWN0UmVzcG9uc2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZWRpcmVjdFJlc3BvbnNlKGRhdGEucmVkaXJlY3RVcmkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZGlyZWN0UmVzcG9uc2U7XG59KCkpO1xuZXhwb3J0cy5SZWRpcmVjdFJlc3BvbnNlID0gUmVkaXJlY3RSZXNwb25zZTtcbi8qKlxuICogRXJyb3JNZXNzYWdlUmVzcG9uc2UgZW5jYXBzdWxhdGVzIGFuIGVycm9yIG1lc3NhZ2UgYWxvbmcgd2l0aCBhbiBvcHRpb25hbCB0aXRsZS5cbiAqL1xudmFyIEVycm9yTWVzc2FnZVJlc3BvbnNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRXJyb3JNZXNzYWdlUmVzcG9uc2UuXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gdGl0bGUgLSBBbiBvcHRpb25hbCB0aXRsZSBmb3IgdGhlIGVycm9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVycm9yTWVzc2FnZVJlc3BvbnNlKG1lc3NhZ2UsIHRpdGxlKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgSlNPTiBzdHJpbmcgdG8gY3JlYXRlIGFuIEVycm9yTWVzc2FnZVJlc3BvbnNlIGluc3RhbmNlLlxuICAgICAqIEV4cGVjdHMgdGhlIEpTT04gdG8gY29udGFpbiBhIFwibWVzc2FnZVwiIHByb3BlcnR5IG9mIHR5cGUgc3RyaW5nLlxuICAgICAqIElmIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nIG9yIGludmFsaWQsIGRpc3BsYXlzIGEgZ2VuZXJpYyBlcnJvciBub3RpZmljYXRpb25cbiAgICAgKiBhbmQgdGhyb3dzIGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGpzb24gLSBUaGUgSlNPTiBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMgQSBuZXcgRXJyb3JNZXNzYWdlUmVzcG9uc2UgaW5zdGFuY2UuXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgSlNPTiBmb3JtYXQgaXMgaW52YWxpZCBvciBcIm1lc3NhZ2VcIiBpcyBub3QgYSBzdHJpbmcuXG4gICAgICovXG4gICAgRXJyb3JNZXNzYWdlUmVzcG9uc2UuZnJvbUpzb24gPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBtZXNzYWdlIGRhdGFcIiwgZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5tZXNzYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBCdXR0b25FeGNlcHRpb25fMS5FeGNlcHRpb25Mb3dDb2RlQnV0dG9uLmRpc3BsYXlHZW5lcmljRXJyb3JOb3RpZmljYXRpb24oXCJFcnJvciBNZXNzYWdlIE5vdCBGb3VuZFwiLCBcIlRoZSBlcnJvciBtZXNzYWdlIHdhcyBub3QgZm91bmQgaW4gdGhlIHJlc3BvbnNlLlwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBmb3JtYXQgZm9yIEVycm9yTWVzc2FnZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yTWVzc2FnZVJlc3BvbnNlKGRhdGEubWVzc2FnZSwgKF9hID0gZGF0YS50aXRsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIik7XG4gICAgfTtcbiAgICByZXR1cm4gRXJyb3JNZXNzYWdlUmVzcG9uc2U7XG59KCkpO1xuZXhwb3J0cy5FcnJvck1lc3NhZ2VSZXNwb25zZSA9IEVycm9yTWVzc2FnZVJlc3BvbnNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Models/BaseButtonResponseModels.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/LowCodeButtonGridBase.ts");
/******/ 	LCB = __webpack_exports__;
/******/ 	
/******/ })()
;