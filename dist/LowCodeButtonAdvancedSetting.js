/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var LCB;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Exceptions/ButtonException.ts":
/*!*******************************************!*\
  !*** ./src/Exceptions/ButtonException.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExceptionLowCodeButton = void 0;\nvar ExceptionLowCodeButton = /** @class */ (function () {\n    function ExceptionLowCodeButton() {\n    }\n    ExceptionLowCodeButton.buttonSettingNotFound = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button setting not found: \".concat(buttonSettingName),\n                            title: \"Button Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.buttonAdvancedSettingNotFound = function (lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button advanced setting not found for the LCID \".concat(lcid),\n                            title: \"Button Advanced Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.displayGenericErrorNotification = function (title, text) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: text,\n                            title: title,\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ExceptionLowCodeButton;\n}());\nexports.ExceptionLowCodeButton = ExceptionLowCodeButton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Exceptions/ButtonException.ts\n");

/***/ }),

/***/ "./src/Helpers/BaseHelper.ts":
/*!***********************************!*\
  !*** ./src/Helpers/BaseHelper.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseHelper = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ../Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\n/**\n * BaseHelper provides core functionality for determining context type and retrieving\n * configuration objects (button setting and advanced setting) using fetch XML queries.\n */\nvar BaseHelper = /** @class */ (function () {\n    function BaseHelper() {\n    }\n    /**\n     * Determines the button location based on the provided context.\n     * - If the context is a FormContext, sets containerType to \"form\" and stores it.\n     * - If the context is a GridControl, sets containerType to \"grid\" or \"subgrid\"\n     *   depending on whether getParent() returns a non-null value.\n     *\n     * @param context - Either a FormContext or a GridControl.\n     */\n    BaseHelper.prototype.getButtonLocation = function (context) {\n        if (context) {\n            if (typeof context.data === \"object\") {\n                this.formContext = context;\n                this.containerType = \"form\";\n            }\n            else if (typeof context.getGrid === \"function\") {\n                this.gridControl = context;\n                if (typeof this.gridControl.getParent === \"function\" && this.gridControl.getParent() !== null) {\n                    this.containerType = \"subgrid\";\n                }\n                else {\n                    this.containerType = \"grid\";\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves the current user's language code from the global context.\n     *\n     * @returns The language code.\n     */\n    BaseHelper.prototype.getLanguageCode = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.languageId;\n    };\n    /**\n     * Retrieves the current user's ID as a lowercase string with curly braces removed.\n     *\n     * @returns The user ID.\n     */\n    BaseHelper.prototype.getUserID = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.userId.replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase();\n    };\n    /**\n     * Retrieves the Entity Plural Name for the provided entity logical name.\n     *\n     * @returns The Entity Plural Name.\n     */\n    BaseHelper.prototype.getEntityPluralName = function (entity) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Xrm.Utility.getEntityMetadata(entity)];\n                    case 1:\n                        name = _a.sent();\n                        return [2 /*return*/, name.EntitySetName];\n                }\n            });\n        });\n    };\n    /**\n     * Makes an HTTP request using fetch with pre-configured headers.\n     *\n     * @param method - The HTTP method (e.g., \"GET\", \"POST\").\n     * @param url - The URL to send the request to.\n     * @param body - Optional request body.\n     * @returns A Promise that resolves to the Response.\n     */\n    BaseHelper.prototype.makeRequest = function (method, url, body) {\n        return __awaiter(this, void 0, void 0, function () {\n            var headers, options;\n            return __generator(this, function (_a) {\n                headers = {\n                    \"Content-Type\": \"application/json\",\n                    \"OData-MaxVersion\": \"4.0\",\n                    \"OData-Version\": \"4.0\",\n                    Accept: \"application/json\",\n                    Prefer: \"odata.include-annotations=*\",\n                };\n                options = {\n                    method: method,\n                    headers: headers,\n                    body: body ? JSON.stringify(body) : undefined,\n                };\n                return [2 /*return*/, fetch(url, options)];\n            });\n        });\n    };\n    /**\n     * Retrieves the button setting record using the provided button setting name.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     * @returns A Promise that resolves to the esp_ButtonSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonSetting = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, setting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonsetting\\\">\\n          <attribute name=\\\"esp_buttonsettingid\\\" />\\n          <attribute name=\\\"esp_buttonlocation\\\" />\\n          <attribute name=\\\"esp_endpoint\\\" />\\n          <attribute name=\\\"esp_includecallinguseridinpayload\\\" />\\n          <attribute name=\\\"esp_includeentitylogicalnameinpayload\\\" />\\n          <attribute name=\\\"esp_includerecordidinpayload\\\" />\\n          <attribute name=\\\"esp_buttonname\\\" />\\n          <attribute name=\\\"esp_savebeforerunning\\\" />\\n          <attribute name=\\\"esp_refreshwhenapicallends\\\" />\\n          <filter type=\\\"and\\\">\\n            <condition attribute=\\\"esp_buttonname\\\" operator=\\\"eq\\\" value=\\\"\".concat(buttonSettingName, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        setting = data.value[0];\n                        this.buttonSetting = setting;\n                        return [2 /*return*/, setting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonSettingNotFound(buttonSettingName);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the advanced button setting record using the main button setting ID and language code.\n     *\n     * @param mainButtonSettingId - The ID of the main button setting.\n     * @param lcid - The language code.\n     * @returns A Promise that resolves to the esp_ButtonAdvancedSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonAdvancedSetting = function (mainButtonSettingId, lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, advancedSetting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n          </filter>\\n          <link-entity name=\\\"esp_language\\\" from=\\\"esp_languageid\\\" to=\\\"esp_settinglanguage\\\" link-type=\\\"inner\\\">\\n            <filter>\\n              <condition attribute=\\\"esp_lcid\\\" operator=\\\"eq\\\" value=\\\"\").concat(lcid, \"\\\" />\\n            </filter>\\n          </link-entity>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        advancedSetting = data.value[0];\n                        this.buttonAdvancedSetting = advancedSetting;\n                        return [2 /*return*/, advancedSetting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonAdvancedSettingNotFound(lcid);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves all advanced button settings except the given LCID.\n     *\n     * @param mainButtonSettingId - The ID of the main button setting.\n     * @param languageId - The language code to exclude.\n     * @returns A Promise that resolves to an array of esp_ButtonAdvancedSetting.\n     */\n    BaseHelper.prototype.getAllButtonAdvancedSettingExceptTheGivenLCID = function (mainButtonSettingId, languageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch>\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n            <condition attribute=\\\"esp_settinglanguage\\\" operator=\\\"ne\\\" value=\\\"\").concat(languageId, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        return [2 /*return*/, data.value];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error\", \"Error while fetching the advanced button settings except the given LCID. Function name: getAllButtonAdvancedSettingExceptTheGivenLCID\");\n                        return [2 /*return*/, []];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Provides the filter for the lookup field in the advanced button setting form, which filters out the other existing advanced button settings for the same button setting, avoiding letting you choose a duplicate language.\n     *\n     * @param buttonAdvancedSetting - The advanced button setting to use for the query.\n     * @returns A Promise that resolves to the ID of the advanced button setting.\n     */\n    BaseHelper.prototype.getFilterLookupForLanguage = function (mainButtonSettingId, languageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allButtonAdvancedSettings, filter;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAllButtonAdvancedSettingExceptTheGivenLCID(mainButtonSettingId, languageId)];\n                    case 1:\n                        allButtonAdvancedSettings = _a.sent();\n                        filter = allButtonAdvancedSettings.map(function (setting) {\n                            return \"<condition attribute=\\\"esp_buttonadvancedsettingid\\\" operator=\\\"ne\\\" value=\\\"\".concat(setting.esp_buttonadvancedsettingid, \"\\\" />\");\n                        });\n                        debugger;\n                        return [2 /*return*/, \"<filter type='and'>\" + filter.join(\"\") + \"</filter>\"];\n                }\n            });\n        });\n    };\n    /**\n     * Initializes settings by retrieving the button setting (using its name) and then the advanced button setting.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     */\n    BaseHelper.prototype.initializeSettings = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var setting;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getButtonSetting(buttonSettingName)];\n                    case 1:\n                        setting = _a.sent();\n                        if (!setting) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.getButtonAdvancedSetting(setting.esp_buttonsettingid, this.getLanguageCode())];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BaseHelper;\n}());\nexports.BaseHelper = BaseHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Helpers/BaseHelper.ts\n");

/***/ }),

/***/ "./src/LowCodeButtonAdvancedSetting.ts":
/*!*********************************************!*\
  !*** ./src/LowCodeButtonAdvancedSetting.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/* eslint-disable camelcase */\n/// <reference types=\"xrm\" />\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnSaveLogic = exports.FormLogic = void 0;\nvar BaseHelper_1 = __webpack_require__(/*! ./Helpers/BaseHelper */ \"./src/Helpers/BaseHelper.ts\");\n// Logic for form Onload and Onchange\nvar FormLogic = /** @class */ (function () {\n    function FormLogic() {\n    }\n    FormLogic.filterLanguage = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, helper, mainButtonSetting, language, mainButtonSettingId, languageId, filter, lookup;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        helper = new BaseHelper_1.BaseHelper();\n                        mainButtonSetting = (_a = formContext\n                            .getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */)) === null || _a === void 0 ? void 0 : _a.getValue();\n                        language = (_b = formContext.getAttribute(\"esp_settinglanguage\" /* esp_ButtonAdvancedSettingAttributes.esp_SettingLanguage */)) === null || _b === void 0 ? void 0 : _b.getValue();\n                        if (!mainButtonSetting) {\n                            return [2 /*return*/];\n                        }\n                        mainButtonSettingId = mainButtonSetting[0].id.replace(/[{}]/g, \"\");\n                        languageId = \"\";\n                        if (language) {\n                            languageId = language[0].id.replace(/[{}]/g, \"\");\n                        }\n                        debugger;\n                        return [4 /*yield*/, helper.getFilterLookupForLanguage(mainButtonSettingId, languageId)];\n                    case 1:\n                        filter = _c.sent();\n                        lookup = formContext.getControl(\"esp_settinglanguage\");\n                        debugger;\n                        if (lookup) {\n                            lookup.addCustomFilter(filter);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FormLogic.toggleDialogSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        // Retrieve the boolean value from field \"esp_showconfirmationdialog\".\n        var dialogField = formContext.getAttribute(\"esp_showconfirmationdialog\" /* esp_ButtonAdvancedSettingAttributes.esp_ShowConfirmationDialog */);\n        if (!dialogField) {\n            return;\n        }\n        var dialogValue = dialogField.getValue();\n        // Retrieve the relevant tab and section\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        var dialogSection = targetTab.sections.get(\"confirmation_dialog\");\n        if (!dialogSection) {\n            return;\n        }\n        // Show section \"confirmation_dialog\" if boolean is true, hide if false (or null).\n        if (dialogValue) {\n            dialogSection.setVisible(true);\n        }\n        else {\n            dialogSection.setVisible(false);\n        }\n    };\n    FormLogic.toggleSyncSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        var syncField = formContext.getAttribute(\"esp_executionmode\" /* esp_ButtonAdvancedSettingAttributes.esp_ExecutionMode */);\n        if (!syncField) {\n            return;\n        }\n        var syncValue = syncField.getValue();\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        // Get both sync and async sections, as one of them must always be visible\n        var syncSection = targetTab.sections.get(\"sync_settings\");\n        if (!syncSection) {\n            return;\n        }\n        var asyncSection = targetTab.sections.get(\"async_settings\");\n        if (!asyncSection) {\n            return;\n        }\n        if (syncValue == 0) {\n            syncSection.setVisible(true);\n            asyncSection.setVisible(false);\n        }\n        else {\n            asyncSection.setVisible(true);\n            syncSection.setVisible(false);\n        }\n    };\n    FormLogic.toggleBoxSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        var boxField = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */);\n        if (!boxField) {\n            return;\n        }\n        var boxValue = boxField.getValue();\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        var defaultBoxSection = targetTab.sections.get(\"sync_confirmation_box\");\n        if (!defaultBoxSection) {\n            return;\n        }\n        var redirectBoxSection = targetTab.sections.get(\"sync_confirmation_redirect\");\n        if (!redirectBoxSection) {\n            return;\n        }\n        if (boxValue == 0) {\n            defaultBoxSection.setVisible(true);\n            redirectBoxSection.setVisible(false);\n        }\n        else if (boxValue == 1) {\n            redirectBoxSection.setVisible(true);\n            defaultBoxSection.setVisible(false);\n        }\n        else {\n            redirectBoxSection.setVisible(false);\n            defaultBoxSection.setVisible(false);\n        }\n    };\n    //On load functions\n    FormLogic.onLoad = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        FormLogic.toggleDialogSection(executionContext);\n                        FormLogic.toggleSyncSection(executionContext);\n                        FormLogic.toggleBoxSection(executionContext);\n                        return [4 /*yield*/, FormLogic.filterLanguage(executionContext)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    //On change functions\n    FormLogic.onChange = function (executionContext) {\n        FormLogic.toggleDialogSection(executionContext);\n        FormLogic.toggleSyncSection(executionContext);\n        FormLogic.toggleBoxSection(executionContext);\n    };\n    return FormLogic;\n}());\nexports.FormLogic = FormLogic;\n// Logic for Form Onsave\nvar OnSaveLogic = /** @class */ (function () {\n    function OnSaveLogic() {\n    }\n    OnSaveLogic.onSaveDialogSection = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, showDialogAttr, mainButtonAttr, languageAttr, showDialogValue, mainButtonValue, languageValue, targetLookupId, languageId, baseHelper, result, updatePromises, _i, result_1, record, recordId, updateData, targetTitle, targetText, targetSubtitle, targetCancel, targetConfirm, anyEmpty, updatePromise, error_1;\n            var _a, _b, _c, _d, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        showDialogAttr = formContext.getAttribute(\"esp_showconfirmationdialog\" /* esp_ButtonAdvancedSettingAttributes.esp_ShowConfirmationDialog */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        languageAttr = formContext.getAttribute(\"esp_settinglanguage\" /* esp_ButtonAdvancedSettingAttributes.esp_SettingLanguage */);\n                        if (!showDialogAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        showDialogValue = showDialogAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        languageValue = languageAttr.getValue();\n                        // 3) If esp_ShowConfirmationDialog is false, clear the specified fields on the current record\n                        if (showDialogValue === false) {\n                            (_a = formContext.getAttribute(\"esp_confirmationdialogtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogTitle */)) === null || _a === void 0 ? void 0 : _a.setValue(null);\n                            (_b = formContext.getAttribute(\"esp_confirmationdialogtext\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogText */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext.getAttribute(\"esp_confirmationdialogsubtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogSubtitle */)) === null || _c === void 0 ? void 0 : _c.setValue(null);\n                            (_d = formContext.getAttribute(\"esp_confirmationdialogcancellabel\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogCancelLabel */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_confirmationdialogconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogConfirmLabel */)) === null || _e === void 0 ? void 0 : _e.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        if (!languageValue || languageValue.length === 0 || !languageValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        languageId = languageValue[0].id.replace(/[{}]/g, \"\");\n                        _f.label = 1;\n                    case 1:\n                        _f.trys.push([1, 5, , 6]);\n                        baseHelper = new BaseHelper_1.BaseHelper();\n                        return [4 /*yield*/, baseHelper.getAllButtonAdvancedSettingExceptTheGivenLCID(targetLookupId, languageId)];\n                    case 2:\n                        result = _f.sent();\n                        console.log(\"We are here: \" + targetLookupId + \", \" + languageId, \", \" + result);\n                        if (!result || result.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n                            record = result_1[_i];\n                            recordId = record.esp_buttonadvancedsettingid;\n                            if (!recordId) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (showDialogValue === false) {\n                                updateData = {\n                                    esp_showconfirmationdialog: false,\n                                    esp_confirmationdialogtitle: null,\n                                    esp_confirmationdialogtext: null,\n                                    esp_confirmationdialogsubtitle: null,\n                                    esp_confirmationdialogcancellabel: null,\n                                    esp_confirmationdialogconfirmlabel: null,\n                                };\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (showDialogValue === true) {\n                                targetTitle = record.esp_confirmationdialogtitle;\n                                targetText = record.esp_confirmationdialogtext;\n                                targetSubtitle = record.esp_confirmationdialogsubtitle;\n                                targetCancel = record.esp_confirmationdialogcancellabel;\n                                targetConfirm = record.esp_confirmationdialogconfirmlabel;\n                                anyEmpty = !targetTitle || !targetText || !targetSubtitle || !targetCancel || !targetConfirm;\n                                if (anyEmpty) {\n                                    updateData = {\n                                        esp_showconfirmationdialog: true,\n                                        esp_modificationneededflag: true,\n                                    };\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _f.sent();\n                        _f.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_1 = _f.sent();\n                        console.error(\"Error in OnSaveLogic for dialog:\", error_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    OnSaveLogic.onSaveSyncSections = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, showSyncAttr, mainButtonAttr, showSyncValue, mainButtonValue, targetLookupId, filter, result, updatePromises, _i, _a, record, recordId, updateData, targetText, anyEmpty, targetType, targetText, spinnerText, successText, anyEmpty, updatePromise, error_2;\n            var _b, _c, _d, _e, _f, _g, _h;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        showSyncAttr = formContext.getAttribute(\"esp_executionmode\" /* esp_ButtonAdvancedSettingAttributes.esp_ExecutionMode */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        if (!showSyncAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        showSyncValue = showSyncAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        // 3) Deppending on esp_ExecutionMode, clear the specified fields on the current record\n                        if (showSyncValue === 0) {\n                            (_b = formContext.getAttribute(\"esp_asyncformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_AsyncFormNotificationText */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext.getAttribute(\"esp_asyncformnotification\" /* esp_ButtonAdvancedSettingAttributes.esp_AsyncFormNotification */)) === null || _c === void 0 ? void 0 : _c.setValue(false);\n                        }\n                        else if (showSyncValue === 1) {\n                            (_d = formContext.getAttribute(\"esp_syncformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncFormNotificationText */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_syncformnotification\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncFormNotification */)) === null || _e === void 0 ? void 0 : _e.setValue(false);\n                            (_f = formContext.getAttribute(\"esp_syncspinnertext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncSpinnerText */)) === null || _f === void 0 ? void 0 : _f.setValue(null);\n                            (_g = formContext.getAttribute(\"esp_syncsuccessformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncSuccessFormNotificationText */)) === null || _g === void 0 ? void 0 : _g.setValue(null);\n                            (_h = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */)) === null || _h === void 0 ? void 0 : _h.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        filter = \"_$esp_mainbuttonsetting_value eq \".concat(targetLookupId);\n                        _j.label = 1;\n                    case 1:\n                        _j.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, Xrm.WebApi.retrieveMultipleRecords(\"esp_buttonadvancedsetting\", \"?$select=esp_AsyncFormNotificationText,esp_SyncFormNotificationText,esp_SyncSpinnerText,esp_SyncSuccessFormNotificationText,esp_SyncConfirmationBoxType,esp_ConfirmationDialogFlag&$filter=\".concat(filter))];\n                    case 2:\n                        result = _j.sent();\n                        if (!result || !result.entities || result.entities.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, _a = result.entities; _i < _a.length; _i++) {\n                            record = _a[_i];\n                            recordId = record[\"esp_buttonadvancedsettingid\"] ||\n                                record[\"esp_ButtonAdvancedSettingId\"] ||\n                                record[\"esp_buttonadvancedsettingId\"];\n                            if (!recordId) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (showSyncValue === 0) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxType: null,\n                                    esp_SyncFormNotificationText: null,\n                                    esp_SyncFormNotification: false,\n                                    esp_SyncSpinnerText: null,\n                                    esp_SyncSuccessFormNotificationText: null,\n                                };\n                                targetText = record[\"esp_AsyncFormNotificationText\"];\n                                anyEmpty = !targetText;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (showSyncValue === 1) {\n                                updateData = {\n                                    esp_AsyncFormNotificationText: null,\n                                    esp_AsyncFormNotification: false,\n                                };\n                                targetType = record[\"esp_SyncConfirmationBoxType\"];\n                                targetText = record[\"esp_SyncFormNotificationText\"];\n                                spinnerText = record[\"esp_SyncSpinnerText\"];\n                                successText = record[\"esp_SyncSuccessFormNotificationText\"];\n                                anyEmpty = !targetType || !targetText || !spinnerText || !successText;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _j.sent();\n                        _j.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_2 = _j.sent();\n                        console.error(\"Error in OnSaveLogic for sync/async:\", error_2);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    OnSaveLogic.onSaveBoxSections = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, boxTypeAttr, mainButtonAttr, boxTypeValue, mainButtonValue, targetLookupId, filter, result, updatePromises, _i, _a, record, recordId, updateData, CboxTitle, CboxText, CboxLabel, anyEmpty, cancelLabel, confirmLabel, boxSubtitle, boxText, boxTitle, anyEmpty, updatePromise, error_3;\n            var _b, _c, _d, _e, _f, _g, _h, _j;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        boxTypeAttr = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        if (!boxTypeAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        boxTypeValue = boxTypeAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        // 3) Deppending on esp_ExecutionMode, clear the specified fields on the current record\n                        if (boxTypeValue === 0) {\n                            (_b = formContext\n                                .getAttribute(\"esp_syncconfirmationboxredirectcancellabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectCancelLabel */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext\n                                .getAttribute(\"esp_syncconfirmationboxredirectconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectConfirmLabel */)) === null || _c === void 0 ? void 0 : _c.setValue(null);\n                            (_d = formContext\n                                .getAttribute(\"esp_syncconfirmationboxredirectsubtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectSubtitle */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_syncconfirmationboxredirecttext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectText */)) === null || _e === void 0 ? void 0 : _e.setValue(null);\n                            (_f = formContext\n                                .getAttribute(\"esp_syncconfirmationboxredirecttitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectTitle */)) === null || _f === void 0 ? void 0 : _f.setValue(null);\n                        }\n                        else if (boxTypeValue === 1) {\n                            (_g = formContext.getAttribute(\"esp_syncconfirmationboxconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxConfirmLabel */)) === null || _g === void 0 ? void 0 : _g.setValue(null);\n                            (_h = formContext.getAttribute(\"esp_syncconfirmationboxtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxText */)) === null || _h === void 0 ? void 0 : _h.setValue(null);\n                            (_j = formContext.getAttribute(\"esp_syncconfirmationboxtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxTitle */)) === null || _j === void 0 ? void 0 : _j.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        filter = \"_$esp_mainbuttonsetting_value eq \".concat(targetLookupId);\n                        _k.label = 1;\n                    case 1:\n                        _k.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, Xrm.WebApi.retrieveMultipleRecords(\"esp_buttonadvancedsetting\", \"?$select=esp_SyncConfirmationBoxTitle,esp_SyncConfirmationBoxText,esp_SyncConfirmationBoxConfirmLabel,esp_SyncConfirmationBoxRedirectTitle,esp_SyncConfirmationBoxRedirectText,esp_SyncConfirmationBoxRedirectSubtitle,esp_SyncConfirmationBoxRedirectCancelLabel,esp_SyncConfirmationBoxRedirectConfirmLabel&$filter=\".concat(filter))];\n                    case 2:\n                        result = _k.sent();\n                        if (!result || !result.entities || result.entities.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, _a = result.entities; _i < _a.length; _i++) {\n                            record = _a[_i];\n                            recordId = record[\"esp_buttonadvancedsettingid\"] ||\n                                record[\"esp_ButtonAdvancedSettingId\"] ||\n                                record[\"esp_buttonadvancedsettingId\"];\n                            if (!recordId) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (boxTypeValue === 0) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxRedirectCancelLabel: null,\n                                    esp_SyncConfirmationBoxRedirectConfirmLabel: null,\n                                    esp_SyncConfirmationBoxRedirectSubtitle: null,\n                                    esp_SyncConfirmationBoxRedirectText: null,\n                                    esp_SyncConfirmationBoxRedirectTitle: null,\n                                };\n                                CboxTitle = record[\"esp_SyncConfirmationBoxTitle\"];\n                                CboxText = record[\"esp_SyncConfirmationBoxText\"];\n                                CboxLabel = record[\"esp_SyncConfirmationBoxConfirmLabel\"];\n                                anyEmpty = !CboxTitle || !CboxText || !CboxLabel;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (boxTypeValue === 1) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxTitle: null,\n                                    esp_SyncConfirmationBoxText: null,\n                                    esp_SyncConfirmationBoxConfirmLabel: null,\n                                };\n                                cancelLabel = record[\"esp_SyncConfirmationBoxRedirectCancelLabel\"];\n                                confirmLabel = record[\"esp_SyncConfirmationBoxRedirectConfirmLabel\"];\n                                boxSubtitle = record[\"esp_SyncConfirmationBoxRedirectSubtitle\"];\n                                boxText = record[\"esp_SyncConfirmationBoxRedirectText\"];\n                                boxTitle = record[\"esp_SyncConfirmationBoxRedirectTitle\"];\n                                anyEmpty = !cancelLabel || !confirmLabel || !boxSubtitle || !boxText || !boxTitle;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _k.sent();\n                        _k.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_3 = _k.sent();\n                        console.error(\"Error in OnSaveLogic for sync/async:\", error_3);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    //On save functions\n    OnSaveLogic.onSave = function (executionContext) {\n        OnSaveLogic.onSaveDialogSection(executionContext);\n        OnSaveLogic.onSaveBoxSections(executionContext);\n        OnSaveLogic.onSaveSyncSections(executionContext);\n    };\n    return OnSaveLogic;\n}());\nexports.OnSaveLogic = OnSaveLogic;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTG93Q29kZUJ1dHRvbkFkdmFuY2VkU2V0dGluZy50cyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLDZCQUE2QiwwQkFBMEIsY0FBYyxxQkFBcUI7QUFDeEcsNklBQTZJLGNBQWM7QUFDM0osdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsbUNBQW1DLFNBQVM7QUFDNUMsbUNBQW1DLFdBQVcsVUFBVTtBQUN4RCwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBLDhHQUE4RyxPQUFPO0FBQ3JILGlGQUFpRixpQkFBaUI7QUFDbEcseURBQXlELGdCQUFnQixRQUFRO0FBQ2pGLCtDQUErQyxnQkFBZ0IsZ0JBQWdCO0FBQy9FO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxVQUFVLFlBQVksYUFBYSxTQUFTLFVBQVU7QUFDdEQsb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxpQkFBaUI7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMseURBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHNCQUFzQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTENCLy4vc3JjL0xvd0NvZGVCdXR0b25BZHZhbmNlZFNldHRpbmcudHM/ZWM1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ4cm1cIiAvPlxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICAgIHJldHVybiBnLm5leHQgPSB2ZXJiKDApLCBnW1widGhyb3dcIl0gPSB2ZXJiKDEpLCBnW1wicmV0dXJuXCJdID0gdmVyYigyKSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT25TYXZlTG9naWMgPSBleHBvcnRzLkZvcm1Mb2dpYyA9IHZvaWQgMDtcbnZhciBCYXNlSGVscGVyXzEgPSByZXF1aXJlKFwiLi9IZWxwZXJzL0Jhc2VIZWxwZXJcIik7XG4vLyBMb2dpYyBmb3IgZm9ybSBPbmxvYWQgYW5kIE9uY2hhbmdlXG52YXIgRm9ybUxvZ2ljID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZvcm1Mb2dpYygpIHtcbiAgICB9XG4gICAgRm9ybUxvZ2ljLmZpbHRlckxhbmd1YWdlID0gZnVuY3Rpb24gKGV4ZWN1dGlvbkNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZvcm1Db250ZXh0LCBoZWxwZXIsIG1haW5CdXR0b25TZXR0aW5nLCBsYW5ndWFnZSwgbWFpbkJ1dHRvblNldHRpbmdJZCwgbGFuZ3VhZ2VJZCwgZmlsdGVyLCBsb29rdXA7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0LmdldEZvcm1Db250ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIgPSBuZXcgQmFzZUhlbHBlcl8xLkJhc2VIZWxwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5CdXR0b25TZXR0aW5nID0gKF9hID0gZm9ybUNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0QXR0cmlidXRlKFwiZXNwX21haW5idXR0b25zZXR0aW5nXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX01haW5CdXR0b25TZXR0aW5nICovKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSA9IChfYiA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9zZXR0aW5nbGFuZ3VhZ2VcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU2V0dGluZ0xhbmd1YWdlICovKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1haW5CdXR0b25TZXR0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkJ1dHRvblNldHRpbmdJZCA9IG1haW5CdXR0b25TZXR0aW5nWzBdLmlkLnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlSWQgPSBsYW5ndWFnZVswXS5pZC5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBoZWxwZXIuZ2V0RmlsdGVyTG9va3VwRm9yTGFuZ3VhZ2UobWFpbkJ1dHRvblNldHRpbmdJZCwgbGFuZ3VhZ2VJZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb29rdXAgPSBmb3JtQ29udGV4dC5nZXRDb250cm9sKFwiZXNwX3NldHRpbmdsYW5ndWFnZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb2t1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb2t1cC5hZGRDdXN0b21GaWx0ZXIoZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGb3JtTG9naWMudG9nZ2xlRGlhbG9nU2VjdGlvbiA9IGZ1bmN0aW9uIChleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICAgIHZhciBmb3JtQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQuZ2V0Rm9ybUNvbnRleHQoKTtcbiAgICAgICAgLy8gUmV0cmlldmUgdGhlIGJvb2xlYW4gdmFsdWUgZnJvbSBmaWVsZCBcImVzcF9zaG93Y29uZmlybWF0aW9uZGlhbG9nXCIuXG4gICAgICAgIHZhciBkaWFsb2dGaWVsZCA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9zaG93Y29uZmlybWF0aW9uZGlhbG9nXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX1Nob3dDb25maXJtYXRpb25EaWFsb2cgKi8pO1xuICAgICAgICBpZiAoIWRpYWxvZ0ZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRpYWxvZ1ZhbHVlID0gZGlhbG9nRmllbGQuZ2V0VmFsdWUoKTtcbiAgICAgICAgLy8gUmV0cmlldmUgdGhlIHJlbGV2YW50IHRhYiBhbmQgc2VjdGlvblxuICAgICAgICB2YXIgdGFyZ2V0VGFiID0gZm9ybUNvbnRleHQudWkudGFicy5nZXQoXCJnZW5lcmFsXCIpO1xuICAgICAgICBpZiAoIXRhcmdldFRhYikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWFsb2dTZWN0aW9uID0gdGFyZ2V0VGFiLnNlY3Rpb25zLmdldChcImNvbmZpcm1hdGlvbl9kaWFsb2dcIik7XG4gICAgICAgIGlmICghZGlhbG9nU2VjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3cgc2VjdGlvbiBcImNvbmZpcm1hdGlvbl9kaWFsb2dcIiBpZiBib29sZWFuIGlzIHRydWUsIGhpZGUgaWYgZmFsc2UgKG9yIG51bGwpLlxuICAgICAgICBpZiAoZGlhbG9nVmFsdWUpIHtcbiAgICAgICAgICAgIGRpYWxvZ1NlY3Rpb24uc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpYWxvZ1NlY3Rpb24uc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvcm1Mb2dpYy50b2dnbGVTeW5jU2VjdGlvbiA9IGZ1bmN0aW9uIChleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICAgIHZhciBmb3JtQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQuZ2V0Rm9ybUNvbnRleHQoKTtcbiAgICAgICAgdmFyIHN5bmNGaWVsZCA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9leGVjdXRpb25tb2RlXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX0V4ZWN1dGlvbk1vZGUgKi8pO1xuICAgICAgICBpZiAoIXN5bmNGaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzeW5jVmFsdWUgPSBzeW5jRmllbGQuZ2V0VmFsdWUoKTtcbiAgICAgICAgdmFyIHRhcmdldFRhYiA9IGZvcm1Db250ZXh0LnVpLnRhYnMuZ2V0KFwiZ2VuZXJhbFwiKTtcbiAgICAgICAgaWYgKCF0YXJnZXRUYWIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgYm90aCBzeW5jIGFuZCBhc3luYyBzZWN0aW9ucywgYXMgb25lIG9mIHRoZW0gbXVzdCBhbHdheXMgYmUgdmlzaWJsZVxuICAgICAgICB2YXIgc3luY1NlY3Rpb24gPSB0YXJnZXRUYWIuc2VjdGlvbnMuZ2V0KFwic3luY19zZXR0aW5nc1wiKTtcbiAgICAgICAgaWYgKCFzeW5jU2VjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhc3luY1NlY3Rpb24gPSB0YXJnZXRUYWIuc2VjdGlvbnMuZ2V0KFwiYXN5bmNfc2V0dGluZ3NcIik7XG4gICAgICAgIGlmICghYXN5bmNTZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN5bmNWYWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICBzeW5jU2VjdGlvbi5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgYXN5bmNTZWN0aW9uLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXN5bmNTZWN0aW9uLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBzeW5jU2VjdGlvbi5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybUxvZ2ljLnRvZ2dsZUJveFNlY3Rpb24gPSBmdW5jdGlvbiAoZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgICB2YXIgZm9ybUNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0LmdldEZvcm1Db250ZXh0KCk7XG4gICAgICAgIHZhciBib3hGaWVsZCA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9zeW5jY29uZmlybWF0aW9uYm94dHlwZVwiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9TeW5jQ29uZmlybWF0aW9uQm94VHlwZSAqLyk7XG4gICAgICAgIGlmICghYm94RmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm94VmFsdWUgPSBib3hGaWVsZC5nZXRWYWx1ZSgpO1xuICAgICAgICB2YXIgdGFyZ2V0VGFiID0gZm9ybUNvbnRleHQudWkudGFicy5nZXQoXCJnZW5lcmFsXCIpO1xuICAgICAgICBpZiAoIXRhcmdldFRhYikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWZhdWx0Qm94U2VjdGlvbiA9IHRhcmdldFRhYi5zZWN0aW9ucy5nZXQoXCJzeW5jX2NvbmZpcm1hdGlvbl9ib3hcIik7XG4gICAgICAgIGlmICghZGVmYXVsdEJveFNlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVkaXJlY3RCb3hTZWN0aW9uID0gdGFyZ2V0VGFiLnNlY3Rpb25zLmdldChcInN5bmNfY29uZmlybWF0aW9uX3JlZGlyZWN0XCIpO1xuICAgICAgICBpZiAoIXJlZGlyZWN0Qm94U2VjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib3hWYWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICBkZWZhdWx0Qm94U2VjdGlvbi5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgcmVkaXJlY3RCb3hTZWN0aW9uLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJveFZhbHVlID09IDEpIHtcbiAgICAgICAgICAgIHJlZGlyZWN0Qm94U2VjdGlvbi5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgZGVmYXVsdEJveFNlY3Rpb24uc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWRpcmVjdEJveFNlY3Rpb24uc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICBkZWZhdWx0Qm94U2VjdGlvbi5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy9PbiBsb2FkIGZ1bmN0aW9uc1xuICAgIEZvcm1Mb2dpYy5vbkxvYWQgPSBmdW5jdGlvbiAoZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBGb3JtTG9naWMudG9nZ2xlRGlhbG9nU2VjdGlvbihleGVjdXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1Mb2dpYy50b2dnbGVTeW5jU2VjdGlvbihleGVjdXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1Mb2dpYy50b2dnbGVCb3hTZWN0aW9uKGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgRm9ybUxvZ2ljLmZpbHRlckxhbmd1YWdlKGV4ZWN1dGlvbkNvbnRleHQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vT24gY2hhbmdlIGZ1bmN0aW9uc1xuICAgIEZvcm1Mb2dpYy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICAgIEZvcm1Mb2dpYy50b2dnbGVEaWFsb2dTZWN0aW9uKGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgICAgICBGb3JtTG9naWMudG9nZ2xlU3luY1NlY3Rpb24oZXhlY3V0aW9uQ29udGV4dCk7XG4gICAgICAgIEZvcm1Mb2dpYy50b2dnbGVCb3hTZWN0aW9uKGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1Mb2dpYztcbn0oKSk7XG5leHBvcnRzLkZvcm1Mb2dpYyA9IEZvcm1Mb2dpYztcbi8vIExvZ2ljIGZvciBGb3JtIE9uc2F2ZVxudmFyIE9uU2F2ZUxvZ2ljID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9uU2F2ZUxvZ2ljKCkge1xuICAgIH1cbiAgICBPblNhdmVMb2dpYy5vblNhdmVEaWFsb2dTZWN0aW9uID0gZnVuY3Rpb24gKGV4ZWN1dGlvbkNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZvcm1Db250ZXh0LCBzaG93RGlhbG9nQXR0ciwgbWFpbkJ1dHRvbkF0dHIsIGxhbmd1YWdlQXR0ciwgc2hvd0RpYWxvZ1ZhbHVlLCBtYWluQnV0dG9uVmFsdWUsIGxhbmd1YWdlVmFsdWUsIHRhcmdldExvb2t1cElkLCBsYW5ndWFnZUlkLCBiYXNlSGVscGVyLCByZXN1bHQsIHVwZGF0ZVByb21pc2VzLCBfaSwgcmVzdWx0XzEsIHJlY29yZCwgcmVjb3JkSWQsIHVwZGF0ZURhdGEsIHRhcmdldFRpdGxlLCB0YXJnZXRUZXh0LCB0YXJnZXRTdWJ0aXRsZSwgdGFyZ2V0Q2FuY2VsLCB0YXJnZXRDb25maXJtLCBhbnlFbXB0eSwgdXBkYXRlUHJvbWlzZSwgZXJyb3JfMTtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9mKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQuZ2V0Rm9ybUNvbnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2dBdHRyID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3Nob3djb25maXJtYXRpb25kaWFsb2dcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU2hvd0NvbmZpcm1hdGlvbkRpYWxvZyAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQnV0dG9uQXR0ciA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9tYWluYnV0dG9uc2V0dGluZ1wiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9NYWluQnV0dG9uU2V0dGluZyAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUF0dHIgPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc2V0dGluZ2xhbmd1YWdlXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX1NldHRpbmdMYW5ndWFnZSAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dEaWFsb2dBdHRyIHx8ICFtYWluQnV0dG9uQXR0cikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTsgLy8gQXR0cmlidXRlcyBub3QgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2dWYWx1ZSA9IHNob3dEaWFsb2dBdHRyLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQnV0dG9uVmFsdWUgPSBtYWluQnV0dG9uQXR0ci5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VWYWx1ZSA9IGxhbmd1YWdlQXR0ci5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgSWYgZXNwX1Nob3dDb25maXJtYXRpb25EaWFsb2cgaXMgZmFsc2UsIGNsZWFyIHRoZSBzcGVjaWZpZWQgZmllbGRzIG9uIHRoZSBjdXJyZW50IHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dEaWFsb2dWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3BfY29uZmlybWF0aW9uZGlhbG9ndGl0bGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfQ29uZmlybWF0aW9uRGlhbG9nVGl0bGUgKi8pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ3RleHRcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfQ29uZmlybWF0aW9uRGlhbG9nVGV4dCAqLykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2MgPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3BfY29uZmlybWF0aW9uZGlhbG9nc3VidGl0bGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfQ29uZmlybWF0aW9uRGlhbG9nU3VidGl0bGUgKi8pKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9kID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ2NhbmNlbGxhYmVsXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX0NvbmZpcm1hdGlvbkRpYWxvZ0NhbmNlbExhYmVsICovKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNldFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZSA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9jb25maXJtYXRpb25kaWFsb2djb25maXJtbGFiZWxcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfQ29uZmlybWF0aW9uRGlhbG9nQ29uZmlybUxhYmVsICovKSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnNldFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNCkgRW5zdXJlIHRoZSBsb29rdXAgaGFzIGEgdmFsaWQgSUQgYmVmb3JlIGZldGNoaW5nIHJlbGF0ZWQgcmVjb3Jkc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYWluQnV0dG9uVmFsdWUgfHwgbWFpbkJ1dHRvblZhbHVlLmxlbmd0aCA9PT0gMCB8fCAhbWFpbkJ1dHRvblZhbHVlWzBdLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYW5ndWFnZVZhbHVlIHx8IGxhbmd1YWdlVmFsdWUubGVuZ3RoID09PSAwIHx8ICFsYW5ndWFnZVZhbHVlWzBdLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TG9va3VwSWQgPSBtYWluQnV0dG9uVmFsdWVbMF0uaWQucmVwbGFjZSgvW3t9XS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlSWQgPSBsYW5ndWFnZVZhbHVlWzBdLmlkLnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mLnRyeXMucHVzaChbMSwgNSwgLCA2XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlSGVscGVyID0gbmV3IEJhc2VIZWxwZXJfMS5CYXNlSGVscGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiYXNlSGVscGVyLmdldEFsbEJ1dHRvbkFkdmFuY2VkU2V0dGluZ0V4Y2VwdFRoZUdpdmVuTENJRCh0YXJnZXRMb29rdXBJZCwgbGFuZ3VhZ2VJZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfZi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldlIGFyZSBoZXJlOiBcIiArIHRhcmdldExvb2t1cElkICsgXCIsIFwiICsgbGFuZ3VhZ2VJZCwgXCIsIFwiICsgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIHJlc3VsdF8xID0gcmVzdWx0OyBfaSA8IHJlc3VsdF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IHJlc3VsdF8xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRJZCA9IHJlY29yZC5lc3BfYnV0dG9uYWR2YW5jZWRzZXR0aW5naWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWNvcmRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgcmVjb3JkJ3MgU2hvd0NvbmZpcm1hdGlvbkRpYWxvZyBpcyBmYWxzZSA9PiBjbGVhciBmaWVsZHMgb24gdGhlIHRhcmdldCByZWNvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd0RpYWxvZ1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX3Nob3djb25maXJtYXRpb25kaWFsb2c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ3RpdGxlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ3RleHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfY29uZmlybWF0aW9uZGlhbG9nc3VidGl0bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfY29uZmlybWF0aW9uZGlhbG9nY2FuY2VsbGFiZWw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfY29uZmlybWF0aW9uZGlhbG9nY29uZmlybWxhYmVsOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCByZWNvcmQncyBTaG93Q29uZmlybWF0aW9uRGlhbG9nIGlzIHRydWUgPT4gaWYgYW55IG9mIHRoZXNlIGZpZWxkcyBhcmUgZW1wdHkgb24gdGhlIHRhcmdldCByZWNvcmQsIHNldCBlc3BfTW9kaWZpY2F0aW9uTmVlZGVkRmxhZyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hvd0RpYWxvZ1ZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFRpdGxlID0gcmVjb3JkLmVzcF9jb25maXJtYXRpb25kaWFsb2d0aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VGV4dCA9IHJlY29yZC5lc3BfY29uZmlybWF0aW9uZGlhbG9ndGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3VidGl0bGUgPSByZWNvcmQuZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ3N1YnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDYW5jZWwgPSByZWNvcmQuZXNwX2NvbmZpcm1hdGlvbmRpYWxvZ2NhbmNlbGxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDb25maXJtID0gcmVjb3JkLmVzcF9jb25maXJtYXRpb25kaWFsb2djb25maXJtbGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueUVtcHR5ID0gIXRhcmdldFRpdGxlIHx8ICF0YXJnZXRUZXh0IHx8ICF0YXJnZXRTdWJ0aXRsZSB8fCAhdGFyZ2V0Q2FuY2VsIHx8ICF0YXJnZXRDb25maXJtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW55RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX3Nob3djb25maXJtYXRpb25kaWFsb2c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX21vZGlmaWNhdGlvbm5lZWRlZGZsYWc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVByb21pc2UgPSBYcm0uV2ViQXBpLnVwZGF0ZVJlY29yZChcImVzcF9idXR0b25hZHZhbmNlZHNldHRpbmdcIiwgcmVjb3JkSWQsIHVwZGF0ZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHVwZGF0ZVByb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHVwZGF0ZVByb21pc2VzLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHVwZGF0ZVByb21pc2VzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9mLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBPblNhdmVMb2dpYyBmb3IgZGlhbG9nOlwiLCBlcnJvcl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPblNhdmVMb2dpYy5vblNhdmVTeW5jU2VjdGlvbnMgPSBmdW5jdGlvbiAoZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZm9ybUNvbnRleHQsIHNob3dTeW5jQXR0ciwgbWFpbkJ1dHRvbkF0dHIsIHNob3dTeW5jVmFsdWUsIG1haW5CdXR0b25WYWx1ZSwgdGFyZ2V0TG9va3VwSWQsIGZpbHRlciwgcmVzdWx0LCB1cGRhdGVQcm9taXNlcywgX2ksIF9hLCByZWNvcmQsIHJlY29yZElkLCB1cGRhdGVEYXRhLCB0YXJnZXRUZXh0LCBhbnlFbXB0eSwgdGFyZ2V0VHlwZSwgdGFyZ2V0VGV4dCwgc3Bpbm5lclRleHQsIHN1Y2Nlc3NUZXh0LCBhbnlFbXB0eSwgdXBkYXRlUHJvbWlzZSwgZXJyb3JfMjtcbiAgICAgICAgICAgIHZhciBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2opIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9qLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dC5nZXRGb3JtQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1N5bmNBdHRyID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX2V4ZWN1dGlvbm1vZGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfRXhlY3V0aW9uTW9kZSAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQnV0dG9uQXR0ciA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9tYWluYnV0dG9uc2V0dGluZ1wiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9NYWluQnV0dG9uU2V0dGluZyAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dTeW5jQXR0ciB8fCAhbWFpbkJ1dHRvbkF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107IC8vIEF0dHJpYnV0ZXMgbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93U3luY1ZhbHVlID0gc2hvd1N5bmNBdHRyLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQnV0dG9uVmFsdWUgPSBtYWluQnV0dG9uQXR0ci5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRGVwcGVuZGluZyBvbiBlc3BfRXhlY3V0aW9uTW9kZSwgY2xlYXIgdGhlIHNwZWNpZmllZCBmaWVsZHMgb24gdGhlIGN1cnJlbnQgcmVjb3JkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1N5bmNWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9hc3luY2Zvcm1ub3RpZmljYXRpb250ZXh0XCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX0FzeW5jRm9ybU5vdGlmaWNhdGlvblRleHQgKi8pKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX2FzeW5jZm9ybW5vdGlmaWNhdGlvblwiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9Bc3luY0Zvcm1Ob3RpZmljYXRpb24gKi8pKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2V0VmFsdWUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hvd1N5bmNWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZCA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9zeW5jZm9ybW5vdGlmaWNhdGlvbnRleHRcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0Zvcm1Ob3RpZmljYXRpb25UZXh0ICovKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNldFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZSA9IGZvcm1Db250ZXh0LmdldEF0dHJpYnV0ZShcImVzcF9zeW5jZm9ybW5vdGlmaWNhdGlvblwiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9TeW5jRm9ybU5vdGlmaWNhdGlvbiAqLykpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5zZXRWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9mID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNzcGlubmVydGV4dFwiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9TeW5jU3Bpbm5lclRleHQgKi8pKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Yuc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9nID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNzdWNjZXNzZm9ybW5vdGlmaWNhdGlvbnRleHRcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY1N1Y2Nlc3NGb3JtTm90aWZpY2F0aW9uVGV4dCAqLykpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2ggPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc3luY2NvbmZpcm1hdGlvbmJveHR5cGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFR5cGUgKi8pKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA0KSBFbnN1cmUgdGhlIGxvb2t1cCBoYXMgYSB2YWxpZCBJRCBiZWZvcmUgZmV0Y2hpbmcgcmVsYXRlZCByZWNvcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1haW5CdXR0b25WYWx1ZSB8fCBtYWluQnV0dG9uVmFsdWUubGVuZ3RoID09PSAwIHx8ICFtYWluQnV0dG9uVmFsdWVbMF0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMb29rdXBJZCA9IG1haW5CdXR0b25WYWx1ZVswXS5pZC5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gXCJfJGVzcF9tYWluYnV0dG9uc2V0dGluZ192YWx1ZSBlcSBcIi5jb25jYXQodGFyZ2V0TG9va3VwSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2oubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfai50cnlzLnB1c2goWzEsIDUsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgWHJtLldlYkFwaS5yZXRyaWV2ZU11bHRpcGxlUmVjb3JkcyhcImVzcF9idXR0b25hZHZhbmNlZHNldHRpbmdcIiwgXCI/JHNlbGVjdD1lc3BfQXN5bmNGb3JtTm90aWZpY2F0aW9uVGV4dCxlc3BfU3luY0Zvcm1Ob3RpZmljYXRpb25UZXh0LGVzcF9TeW5jU3Bpbm5lclRleHQsZXNwX1N5bmNTdWNjZXNzRm9ybU5vdGlmaWNhdGlvblRleHQsZXNwX1N5bmNDb25maXJtYXRpb25Cb3hUeXBlLGVzcF9Db25maXJtYXRpb25EaWFsb2dGbGFnJiRmaWx0ZXI9XCIuY29uY2F0KGZpbHRlcikpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2ouc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdC5lbnRpdGllcyB8fCByZXN1bHQuZW50aXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IHJlc3VsdC5lbnRpdGllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkSWQgPSByZWNvcmRbXCJlc3BfYnV0dG9uYWR2YW5jZWRzZXR0aW5naWRcIl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkW1wiZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0lkXCJdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZFtcImVzcF9idXR0b25hZHZhbmNlZHNldHRpbmdJZFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29yZElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCByZWNvcmQncyBTaG93Q29uZmlybWF0aW9uRGlhbG9nIGlzIGZhbHNlID0+IGNsZWFyIGZpZWxkcyBvbiB0aGUgdGFyZ2V0IHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG93U3luY1ZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfU3luY0NvbmZpcm1hdGlvbkJveFR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfU3luY0Zvcm1Ob3RpZmljYXRpb25UZXh0OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX1N5bmNGb3JtTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jU3Bpbm5lclRleHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfU3luY1N1Y2Nlc3NGb3JtTm90aWZpY2F0aW9uVGV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VGV4dCA9IHJlY29yZFtcImVzcF9Bc3luY0Zvcm1Ob3RpZmljYXRpb25UZXh0XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlFbXB0eSA9ICF0YXJnZXRUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW55RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEuZXNwX01vZGlmaWNhdGlvbk5lZWRlZEZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IHJlY29yZCdzIFNob3dDb25maXJtYXRpb25EaWFsb2cgaXMgdHJ1ZSA9PiBpZiBhbnkgb2YgdGhlc2UgZmllbGRzIGFyZSBlbXB0eSBvbiB0aGUgdGFyZ2V0IHJlY29yZCwgc2V0IGVzcF9Nb2RpZmljYXRpb25OZWVkZWRGbGFnIHRvIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzaG93U3luY1ZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfQXN5bmNGb3JtTm90aWZpY2F0aW9uVGV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9Bc3luY0Zvcm1Ob3RpZmljYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRUeXBlID0gcmVjb3JkW1wiZXNwX1N5bmNDb25maXJtYXRpb25Cb3hUeXBlXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRUZXh0ID0gcmVjb3JkW1wiZXNwX1N5bmNGb3JtTm90aWZpY2F0aW9uVGV4dFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bpbm5lclRleHQgPSByZWNvcmRbXCJlc3BfU3luY1NwaW5uZXJUZXh0XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzVGV4dCA9IHJlY29yZFtcImVzcF9TeW5jU3VjY2Vzc0Zvcm1Ob3RpZmljYXRpb25UZXh0XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlFbXB0eSA9ICF0YXJnZXRUeXBlIHx8ICF0YXJnZXRUZXh0IHx8ICFzcGlubmVyVGV4dCB8fCAhc3VjY2Vzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbnlFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YS5lc3BfTW9kaWZpY2F0aW9uTmVlZGVkRmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHJvbWlzZSA9IFhybS5XZWJBcGkudXBkYXRlUmVjb3JkKFwiZXNwX2J1dHRvbmFkdmFuY2Vkc2V0dGluZ1wiLCByZWNvcmRJZCwgdXBkYXRlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVByb21pc2VzLnB1c2godXBkYXRlUHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodXBkYXRlUHJvbWlzZXMubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwodXBkYXRlUHJvbWlzZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2ouc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2oubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8yID0gX2ouc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIE9uU2F2ZUxvZ2ljIGZvciBzeW5jL2FzeW5jOlwiLCBlcnJvcl8yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPblNhdmVMb2dpYy5vblNhdmVCb3hTZWN0aW9ucyA9IGZ1bmN0aW9uIChleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmb3JtQ29udGV4dCwgYm94VHlwZUF0dHIsIG1haW5CdXR0b25BdHRyLCBib3hUeXBlVmFsdWUsIG1haW5CdXR0b25WYWx1ZSwgdGFyZ2V0TG9va3VwSWQsIGZpbHRlciwgcmVzdWx0LCB1cGRhdGVQcm9taXNlcywgX2ksIF9hLCByZWNvcmQsIHJlY29yZElkLCB1cGRhdGVEYXRhLCBDYm94VGl0bGUsIENib3hUZXh0LCBDYm94TGFiZWwsIGFueUVtcHR5LCBjYW5jZWxMYWJlbCwgY29uZmlybUxhYmVsLCBib3hTdWJ0aXRsZSwgYm94VGV4dCwgYm94VGl0bGUsIGFueUVtcHR5LCB1cGRhdGVQcm9taXNlLCBlcnJvcl8zO1xuICAgICAgICAgICAgdmFyIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfajtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2spIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9rLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dC5nZXRGb3JtQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94VHlwZUF0dHIgPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc3luY2NvbmZpcm1hdGlvbmJveHR5cGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFR5cGUgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkJ1dHRvbkF0dHIgPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3BfbWFpbmJ1dHRvbnNldHRpbmdcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfTWFpbkJ1dHRvblNldHRpbmcgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFib3hUeXBlQXR0ciB8fCAhbWFpbkJ1dHRvbkF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107IC8vIEF0dHJpYnV0ZXMgbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBib3hUeXBlVmFsdWUgPSBib3hUeXBlQXR0ci5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkJ1dHRvblZhbHVlID0gbWFpbkJ1dHRvbkF0dHIuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDMpIERlcHBlbmRpbmcgb24gZXNwX0V4ZWN1dGlvbk1vZGUsIGNsZWFyIHRoZSBzcGVjaWZpZWQgZmllbGRzIG9uIHRoZSBjdXJyZW50IHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJveFR5cGVWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IGZvcm1Db250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc3luY2NvbmZpcm1hdGlvbmJveHJlZGlyZWN0Y2FuY2VsbGFiZWxcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0Q2FuY2VsTGFiZWwgKi8pKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0gZm9ybUNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldEF0dHJpYnV0ZShcImVzcF9zeW5jY29uZmlybWF0aW9uYm94cmVkaXJlY3Rjb25maXJtbGFiZWxcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0Q29uZmlybUxhYmVsICovKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnNldFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZCA9IGZvcm1Db250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc3luY2NvbmZpcm1hdGlvbmJveHJlZGlyZWN0c3VidGl0bGVcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0U3VidGl0bGUgKi8pKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9lID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNjb25maXJtYXRpb25ib3hyZWRpcmVjdHRleHRcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0VGV4dCAqLykpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2YgPSBmb3JtQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNjb25maXJtYXRpb25ib3hyZWRpcmVjdHRpdGxlXCIgLyogZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0F0dHJpYnV0ZXMuZXNwX1N5bmNDb25maXJtYXRpb25Cb3hSZWRpcmVjdFRpdGxlICovKSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLnNldFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYm94VHlwZVZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9nID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNjb25maXJtYXRpb25ib3hjb25maXJtbGFiZWxcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveENvbmZpcm1MYWJlbCAqLykpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2ggPSBmb3JtQ29udGV4dC5nZXRBdHRyaWJ1dGUoXCJlc3Bfc3luY2NvbmZpcm1hdGlvbmJveHRleHRcIiAvKiBlc3BfQnV0dG9uQWR2YW5jZWRTZXR0aW5nQXR0cmlidXRlcy5lc3BfU3luY0NvbmZpcm1hdGlvbkJveFRleHQgKi8pKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9qID0gZm9ybUNvbnRleHQuZ2V0QXR0cmlidXRlKFwiZXNwX3N5bmNjb25maXJtYXRpb25ib3h0aXRsZVwiIC8qIGVzcF9CdXR0b25BZHZhbmNlZFNldHRpbmdBdHRyaWJ1dGVzLmVzcF9TeW5jQ29uZmlybWF0aW9uQm94VGl0bGUgKi8pKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA0KSBFbnN1cmUgdGhlIGxvb2t1cCBoYXMgYSB2YWxpZCBJRCBiZWZvcmUgZmV0Y2hpbmcgcmVsYXRlZCByZWNvcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1haW5CdXR0b25WYWx1ZSB8fCBtYWluQnV0dG9uVmFsdWUubGVuZ3RoID09PSAwIHx8ICFtYWluQnV0dG9uVmFsdWVbMF0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMb29rdXBJZCA9IG1haW5CdXR0b25WYWx1ZVswXS5pZC5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gXCJfJGVzcF9tYWluYnV0dG9uc2V0dGluZ192YWx1ZSBlcSBcIi5jb25jYXQodGFyZ2V0TG9va3VwSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2subGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfay50cnlzLnB1c2goWzEsIDUsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgWHJtLldlYkFwaS5yZXRyaWV2ZU11bHRpcGxlUmVjb3JkcyhcImVzcF9idXR0b25hZHZhbmNlZHNldHRpbmdcIiwgXCI/JHNlbGVjdD1lc3BfU3luY0NvbmZpcm1hdGlvbkJveFRpdGxlLGVzcF9TeW5jQ29uZmlybWF0aW9uQm94VGV4dCxlc3BfU3luY0NvbmZpcm1hdGlvbkJveENvbmZpcm1MYWJlbCxlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0VGl0bGUsZXNwX1N5bmNDb25maXJtYXRpb25Cb3hSZWRpcmVjdFRleHQsZXNwX1N5bmNDb25maXJtYXRpb25Cb3hSZWRpcmVjdFN1YnRpdGxlLGVzcF9TeW5jQ29uZmlybWF0aW9uQm94UmVkaXJlY3RDYW5jZWxMYWJlbCxlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0Q29uZmlybUxhYmVsJiRmaWx0ZXI9XCIuY29uY2F0KGZpbHRlcikpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2suc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdC5lbnRpdGllcyB8fCByZXN1bHQuZW50aXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IHJlc3VsdC5lbnRpdGllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkSWQgPSByZWNvcmRbXCJlc3BfYnV0dG9uYWR2YW5jZWRzZXR0aW5naWRcIl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkW1wiZXNwX0J1dHRvbkFkdmFuY2VkU2V0dGluZ0lkXCJdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZFtcImVzcF9idXR0b25hZHZhbmNlZHNldHRpbmdJZFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29yZElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCByZWNvcmQncyBTaG93Q29uZmlybWF0aW9uRGlhbG9nIGlzIGZhbHNlID0+IGNsZWFyIGZpZWxkcyBvbiB0aGUgdGFyZ2V0IHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib3hUeXBlVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jQ29uZmlybWF0aW9uQm94UmVkaXJlY3RDYW5jZWxMYWJlbDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jQ29uZmlybWF0aW9uQm94UmVkaXJlY3RDb25maXJtTGFiZWw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0U3VidGl0bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0VGV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jQ29uZmlybWF0aW9uQm94UmVkaXJlY3RUaXRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2JveFRpdGxlID0gcmVjb3JkW1wiZXNwX1N5bmNDb25maXJtYXRpb25Cb3hUaXRsZVwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2JveFRleHQgPSByZWNvcmRbXCJlc3BfU3luY0NvbmZpcm1hdGlvbkJveFRleHRcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENib3hMYWJlbCA9IHJlY29yZFtcImVzcF9TeW5jQ29uZmlybWF0aW9uQm94Q29uZmlybUxhYmVsXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlFbXB0eSA9ICFDYm94VGl0bGUgfHwgIUNib3hUZXh0IHx8ICFDYm94TGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbnlFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YS5lc3BfTW9kaWZpY2F0aW9uTmVlZGVkRmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgcmVjb3JkJ3MgU2hvd0NvbmZpcm1hdGlvbkRpYWxvZyBpcyB0cnVlID0+IGlmIGFueSBvZiB0aGVzZSBmaWVsZHMgYXJlIGVtcHR5IG9uIHRoZSB0YXJnZXQgcmVjb3JkLCBzZXQgZXNwX01vZGlmaWNhdGlvbk5lZWRlZEZsYWcgdG8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJveFR5cGVWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNwX1N5bmNDb25maXJtYXRpb25Cb3hUaXRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jQ29uZmlybWF0aW9uQm94VGV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzcF9TeW5jQ29uZmlybWF0aW9uQm94Q29uZmlybUxhYmVsOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxMYWJlbCA9IHJlY29yZFtcImVzcF9TeW5jQ29uZmlybWF0aW9uQm94UmVkaXJlY3RDYW5jZWxMYWJlbFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUxhYmVsID0gcmVjb3JkW1wiZXNwX1N5bmNDb25maXJtYXRpb25Cb3hSZWRpcmVjdENvbmZpcm1MYWJlbFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94U3VidGl0bGUgPSByZWNvcmRbXCJlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0U3VidGl0bGVcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFRleHQgPSByZWNvcmRbXCJlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0VGV4dFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94VGl0bGUgPSByZWNvcmRbXCJlc3BfU3luY0NvbmZpcm1hdGlvbkJveFJlZGlyZWN0VGl0bGVcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueUVtcHR5ID0gIWNhbmNlbExhYmVsIHx8ICFjb25maXJtTGFiZWwgfHwgIWJveFN1YnRpdGxlIHx8ICFib3hUZXh0IHx8ICFib3hUaXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFueUVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhLmVzcF9Nb2RpZmljYXRpb25OZWVkZWRGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQcm9taXNlID0gWHJtLldlYkFwaS51cGRhdGVSZWNvcmQoXCJlc3BfYnV0dG9uYWR2YW5jZWRzZXR0aW5nXCIsIHJlY29yZElkLCB1cGRhdGVEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHJvbWlzZXMucHVzaCh1cGRhdGVQcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh1cGRhdGVQcm9taXNlcy5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbCh1cGRhdGVQcm9taXNlcyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfay5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfay5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzMgPSBfay5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gT25TYXZlTG9naWMgZm9yIHN5bmMvYXN5bmM6XCIsIGVycm9yXzMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vT24gc2F2ZSBmdW5jdGlvbnNcbiAgICBPblNhdmVMb2dpYy5vblNhdmUgPSBmdW5jdGlvbiAoZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgICBPblNhdmVMb2dpYy5vblNhdmVEaWFsb2dTZWN0aW9uKGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgICAgICBPblNhdmVMb2dpYy5vblNhdmVCb3hTZWN0aW9ucyhleGVjdXRpb25Db250ZXh0KTtcbiAgICAgICAgT25TYXZlTG9naWMub25TYXZlU3luY1NlY3Rpb25zKGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgIH07XG4gICAgcmV0dXJuIE9uU2F2ZUxvZ2ljO1xufSgpKTtcbmV4cG9ydHMuT25TYXZlTG9naWMgPSBPblNhdmVMb2dpYztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/LowCodeButtonAdvancedSetting.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/LowCodeButtonAdvancedSetting.ts");
/******/ 	LCB = __webpack_exports__;
/******/ 	
/******/ })()
;