/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var LCB;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Exceptions/ButtonException.ts":
/*!*******************************************!*\
  !*** ./src/Exceptions/ButtonException.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExceptionLowCodeButton = void 0;\nvar ExceptionLowCodeButton = /** @class */ (function () {\n    function ExceptionLowCodeButton() {\n    }\n    ExceptionLowCodeButton.buttonSettingNotFound = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button setting not found: \".concat(buttonSettingName),\n                            title: \"Button Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.buttonAdvancedSettingNotFound = function (lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: \"Button advanced setting not found for the LCID \".concat(lcid),\n                            title: \"Button Advanced Setting Not Found\",\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExceptionLowCodeButton.displayGenericErrorNotification = function (title, text) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorStrings;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        errorStrings = {\n                            text: text,\n                            title: title,\n                        };\n                        return [4 /*yield*/, Xrm.Navigation.openAlertDialog(errorStrings)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ExceptionLowCodeButton;\n}());\nexports.ExceptionLowCodeButton = ExceptionLowCodeButton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Exceptions/ButtonException.ts\n");

/***/ }),

/***/ "./src/Helpers/BaseHelper.ts":
/*!***********************************!*\
  !*** ./src/Helpers/BaseHelper.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseHelper = void 0;\nvar ButtonException_1 = __webpack_require__(/*! ../Exceptions/ButtonException */ \"./src/Exceptions/ButtonException.ts\");\n/**\n * BaseHelper provides core functionality for determining context type and retrieving\n * configuration objects (button setting and advanced setting) using fetch XML queries.\n */\nvar BaseHelper = /** @class */ (function () {\n    function BaseHelper() {\n    }\n    /**\n     * Determines the button location based on the provided context.\n     * - If the context is a FormContext, sets containerType to \"form\" and stores it.\n     * - If the context is a GridControl, sets containerType to \"grid\" or \"subgrid\"\n     *   depending on whether getParent() returns a non-null value.\n     *\n     * @param context - Either a FormContext or a GridControl.\n     */\n    BaseHelper.prototype.getButtonLocation = function (context) {\n        if (context) {\n            if (typeof context.data === \"object\") {\n                this.formContext = context;\n                this.containerType = \"form\";\n            }\n            else if (typeof context.getGrid === \"function\") {\n                this.gridControl = context;\n                if (typeof this.gridControl.getParent === \"function\" && this.gridControl.getParent() !== null) {\n                    this.containerType = \"subgrid\";\n                }\n                else {\n                    this.containerType = \"grid\";\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves the current user's language code from the global context.\n     *\n     * @returns The language code.\n     */\n    BaseHelper.prototype.getLanguageCode = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.languageId;\n    };\n    /**\n     * Retrieves the current user's ID as a lowercase string with curly braces removed.\n     *\n     * @returns The user ID.\n     */\n    BaseHelper.prototype.getUserID = function () {\n        return Xrm.Utility.getGlobalContext().userSettings.userId.replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase();\n    };\n    /**\n     * Retrieves the Entity Plural Name for the provided entity logical name.\n     *\n     * @returns The Entity Plural Name.\n     */\n    BaseHelper.prototype.getEntityPluralName = function (entity) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Xrm.Utility.getEntityMetadata(entity)];\n                    case 1:\n                        name = _a.sent();\n                        return [2 /*return*/, name.EntitySetName];\n                }\n            });\n        });\n    };\n    /**\n     * Makes an HTTP request using fetch with pre-configured headers.\n     *\n     * @param method - The HTTP method (e.g., \"GET\", \"POST\").\n     * @param url - The URL to send the request to.\n     * @param body - Optional request body.\n     * @returns A Promise that resolves to the Response.\n     */\n    BaseHelper.prototype.makeRequest = function (method, url, body) {\n        return __awaiter(this, void 0, void 0, function () {\n            var headers, options;\n            return __generator(this, function (_a) {\n                headers = {\n                    \"Content-Type\": \"application/json\",\n                    \"OData-MaxVersion\": \"4.0\",\n                    \"OData-Version\": \"4.0\",\n                    Accept: \"application/json\",\n                    Prefer: \"odata.include-annotations=*\",\n                };\n                options = {\n                    method: method,\n                    headers: headers,\n                    body: body ? JSON.stringify(body) : undefined,\n                };\n                return [2 /*return*/, fetch(url, options)];\n            });\n        });\n    };\n    /**\n     * Retrieves the button setting record using the provided button setting name.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     * @returns A Promise that resolves to the esp_ButtonSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonSetting = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, setting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonsetting\\\">\\n          <attribute name=\\\"esp_buttonsettingid\\\" />\\n          <attribute name=\\\"esp_buttonlocation\\\" />\\n          <attribute name=\\\"esp_endpoint\\\" />\\n          <attribute name=\\\"esp_includecallinguseridinpayload\\\" />\\n          <attribute name=\\\"esp_includeentitylogicalnameinpayload\\\" />\\n          <attribute name=\\\"esp_includerecordidinpayload\\\" />\\n          <attribute name=\\\"esp_buttonname\\\" />\\n          <attribute name=\\\"esp_savebeforerunning\\\" />\\n          <attribute name=\\\"esp_refreshwhenapicallends\\\" />\\n          <filter type=\\\"and\\\">\\n            <condition attribute=\\\"esp_buttonname\\\" operator=\\\"eq\\\" value=\\\"\".concat(buttonSettingName, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        setting = data.value[0];\n                        this.buttonSetting = setting;\n                        return [2 /*return*/, setting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonSettingNotFound(buttonSettingName);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the advanced button setting record using the main button setting ID and language code.\n     *\n     * @param mainButtonSettingId - The ID of the main button setting.\n     * @param lcid - The language code.\n     * @returns A Promise that resolves to the esp_ButtonAdvancedSetting or null.\n     * @throws An error if the fetch fails.\n     */\n    BaseHelper.prototype.getButtonAdvancedSetting = function (mainButtonSettingId, lcid) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, advancedSetting, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch top=\\\"1\\\">\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n          </filter>\\n          <link-entity name=\\\"esp_language\\\" from=\\\"esp_languageid\\\" to=\\\"esp_settinglanguage\\\" link-type=\\\"inner\\\">\\n            <filter>\\n              <condition attribute=\\\"esp_lcid\\\" operator=\\\"eq\\\" value=\\\"\").concat(lcid, \"\\\" />\\n            </filter>\\n          </link-entity>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        advancedSetting = data.value[0];\n                        this.buttonAdvancedSetting = advancedSetting;\n                        return [2 /*return*/, advancedSetting];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.buttonAdvancedSettingNotFound(lcid);\n                        return [2 /*return*/, null];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseHelper.prototype.getAllButtonAdvancedSettingExceptTheGivenLCID = function (mainButtonSettingId, languageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchXml, query, url, response, data, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fetchXml = \"\\n      <fetch>\\n        <entity name=\\\"esp_buttonadvancedsetting\\\">\\n          <attribute name=\\\"esp_asyncformnotification\\\" />\\n          <attribute name=\\\"esp_asyncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_buttonadvancedsettingid\\\" />\\n          <attribute name=\\\"esp_confirmationdialogcancellabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogconfirmlabel\\\" />\\n          <attribute name=\\\"esp_confirmationdialogsubtitle\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtext\\\" />\\n          <attribute name=\\\"esp_confirmationdialogtitle\\\" />\\n          <attribute name=\\\"esp_executionmode\\\" />\\n          <attribute name=\\\"esp_mainbuttonsetting\\\" />\\n          <attribute name=\\\"esp_modificationneededflag\\\" />\\n          <attribute name=\\\"esp_settingid\\\" />\\n          <attribute name=\\\"esp_settinglanguage\\\" />\\n          <attribute name=\\\"esp_showconfirmationdialog\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectcancellabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectconfirmlabel\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectmode\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirectsubtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxredirecttitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtext\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtitle\\\" />\\n          <attribute name=\\\"esp_syncconfirmationboxtype\\\" />\\n          <attribute name=\\\"esp_syncformnotification\\\" />\\n          <attribute name=\\\"esp_syncformnotificationtext\\\" />\\n          <attribute name=\\\"esp_syncrefreshform\\\" />\\n          <attribute name=\\\"esp_syncspinner\\\" />\\n          <attribute name=\\\"esp_syncspinnertext\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotification\\\" />\\n          <attribute name=\\\"esp_syncsuccessformnotificationtext\\\" />\\n          <filter>\\n            <condition attribute=\\\"esp_mainbuttonsetting\\\" operator=\\\"eq\\\" value=\\\"\".concat(mainButtonSettingId, \"\\\" />\\n            <condition attribute=\\\"esp_settinglanguage\\\" operator=\\\"ne\\\" value=\\\"\").concat(languageId, \"\\\" />\\n          </filter>\\n        </entity>\\n      </fetch>\\n    \");\n                        query = \"?fetchXml=\".concat(encodeURIComponent(fetchXml));\n                        url = \"\".concat(Xrm.Utility.getGlobalContext().getClientUrl(), \"/api/data/v9.1/esp_buttonadvancedsettings\").concat(query);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        debugger;\n                        return [4 /*yield*/, this.makeRequest(\"GET\", url)];\n                    case 2:\n                        response = _b.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        data = _b.sent();\n                        return [2 /*return*/, data.value];\n                    case 4:\n                        _a = _b.sent();\n                        ButtonException_1.ExceptionLowCodeButton.displayGenericErrorNotification(\"Error\", \"Error while fetching the advanced button settings except the given LCID. Function name: getAllButtonAdvancedSettingExceptTheGivenLCID\");\n                        return [2 /*return*/, []];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Initializes settings by retrieving the button setting (using its name) and then the advanced button setting.\n     *\n     * @param buttonSettingName - The name of the button setting to retrieve.\n     */\n    BaseHelper.prototype.initializeSettings = function (buttonSettingName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var setting;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getButtonSetting(buttonSettingName)];\n                    case 1:\n                        setting = _a.sent();\n                        if (!setting) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.getButtonAdvancedSetting(setting.esp_buttonsettingid, this.getLanguageCode())];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BaseHelper;\n}());\nexports.BaseHelper = BaseHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Helpers/BaseHelper.ts\n");

/***/ }),

/***/ "./src/LowCodeButtonAdvancedSetting.ts":
/*!*********************************************!*\
  !*** ./src/LowCodeButtonAdvancedSetting.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/* eslint-disable camelcase */\n/// <reference types=\"xrm\" />\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnSaveLogic = exports.FormLogic = void 0;\nvar BaseHelper_1 = __webpack_require__(/*! ./Helpers/BaseHelper */ \"./src/Helpers/BaseHelper.ts\");\n// Logic for form Onload and Onchange\nvar FormLogic = /** @class */ (function () {\n    function FormLogic() {\n    }\n    FormLogic.toggleDialogSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        // Retrieve the boolean value from field \"esp_showconfirmationdialog\".\n        var dialogField = formContext.getAttribute(\"esp_showconfirmationdialog\" /* esp_ButtonAdvancedSettingAttributes.esp_ShowConfirmationDialog */);\n        if (!dialogField) {\n            return;\n        }\n        var dialogValue = dialogField.getValue();\n        // Retrieve the relevant tab and section\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        var dialogSection = targetTab.sections.get(\"confirmation_dialog\");\n        if (!dialogSection) {\n            return;\n        }\n        // Show section \"confirmation_dialog\" if boolean is true, hide if false (or null).\n        if (dialogValue) {\n            dialogSection.setVisible(true);\n        }\n        else {\n            dialogSection.setVisible(false);\n        }\n    };\n    FormLogic.toggleSyncSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        var syncField = formContext.getAttribute(\"esp_executionmode\" /* esp_ButtonAdvancedSettingAttributes.esp_ExecutionMode */);\n        if (!syncField) {\n            return;\n        }\n        var syncValue = syncField.getValue();\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        // Get both sync and async sections, as one of them must always be visible\n        var syncSection = targetTab.sections.get(\"sync_settings\");\n        if (!syncSection) {\n            return;\n        }\n        var asyncSection = targetTab.sections.get(\"async_settings\");\n        if (!asyncSection) {\n            return;\n        }\n        if (syncValue == 0) {\n            syncSection.setVisible(true);\n            asyncSection.setVisible(false);\n        }\n        else {\n            asyncSection.setVisible(true);\n            syncSection.setVisible(false);\n        }\n    };\n    FormLogic.toggleBoxSection = function (executionContext) {\n        var formContext = executionContext.getFormContext();\n        var boxField = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */);\n        if (!boxField) {\n            return;\n        }\n        var boxValue = boxField.getValue();\n        var targetTab = formContext.ui.tabs.get(\"general\");\n        if (!targetTab) {\n            return;\n        }\n        var defaultBoxSection = targetTab.sections.get(\"sync_confirmation_box\");\n        if (!defaultBoxSection) {\n            return;\n        }\n        var redirectBoxSection = targetTab.sections.get(\"sync_confirmation_redirect\");\n        if (!redirectBoxSection) {\n            return;\n        }\n        if (boxValue == 0) {\n            defaultBoxSection.setVisible(true);\n            redirectBoxSection.setVisible(false);\n        }\n        else if (boxValue == 1) {\n            redirectBoxSection.setVisible(true);\n            defaultBoxSection.setVisible(false);\n        }\n        else {\n            redirectBoxSection.setVisible(false);\n            defaultBoxSection.setVisible(false);\n        }\n    };\n    //On load functions\n    FormLogic.onLoad = function (executionContext) {\n        FormLogic.toggleDialogSection(executionContext);\n        FormLogic.toggleSyncSection(executionContext);\n        FormLogic.toggleBoxSection(executionContext);\n    };\n    //On change functions\n    FormLogic.onChange = function (executionContext) {\n        FormLogic.toggleDialogSection(executionContext);\n        FormLogic.toggleSyncSection(executionContext);\n        FormLogic.toggleBoxSection(executionContext);\n    };\n    return FormLogic;\n}());\nexports.FormLogic = FormLogic;\n// Logic for Form Onsave\nvar OnSaveLogic = /** @class */ (function () {\n    function OnSaveLogic() {\n    }\n    OnSaveLogic.onSaveDialogSection = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, showDialogAttr, mainButtonAttr, showDialogValue, mainButtonValue, targetLookupId, filter, baseHelper, recordId, result, updatePromises, _i, result_1, record, recordId_1, updateData, targetTitle, targetText, targetSubtitle, targetCancel, targetConfirm, anyEmpty, updatePromise, error_1;\n            var _a, _b, _c, _d, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        showDialogAttr = formContext.getAttribute(\"esp_showconfirmationdialog\" /* esp_ButtonAdvancedSettingAttributes.esp_ShowConfirmationDialog */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        if (!showDialogAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        showDialogValue = showDialogAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        // 3) If esp_ShowConfirmationDialog is false, clear the specified fields on the current record\n                        if (showDialogValue === false) {\n                            (_a = formContext.getAttribute(\"esp_confirmationdialogtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogTitle */)) === null || _a === void 0 ? void 0 : _a.setValue(null);\n                            (_b = formContext.getAttribute(\"esp_confirmationdialogtext\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogText */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext.getAttribute(\"esp_confirmationdialogsubtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogSubtitle */)) === null || _c === void 0 ? void 0 : _c.setValue(null);\n                            (_d = formContext.getAttribute(\"esp_confirmationdialogcancellabel\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogCancelLabel */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_confirmationdialogconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_ConfirmationDialogConfirmLabel */)) === null || _e === void 0 ? void 0 : _e.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        filter = \"_$esp_mainbuttonsetting_value eq \".concat(targetLookupId);\n                        _f.label = 1;\n                    case 1:\n                        _f.trys.push([1, 5, , 6]);\n                        baseHelper = new BaseHelper_1.BaseHelper();\n                        recordId = formContext.data.entity.getId();\n                        return [4 /*yield*/, baseHelper.getAllButtonAdvancedSettingExceptTheGivenLCID(targetLookupId, recordId.replace(/[{}]/g, \"\"))];\n                    case 2:\n                        result = _f.sent();\n                        console.log(\"We are here: \" + targetLookupId + \", \" + recordId.replace(/[{}]/g, \"\"), \", \" + result);\n                        if (!result || result.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n                            record = result_1[_i];\n                            recordId_1 = record.esp_buttonadvancedsettingid;\n                            if (!recordId_1) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (showDialogValue === false) {\n                                updateData = {\n                                    esp_confirmationdialogtitle: null,\n                                    esp_confirmationdialogtext: null,\n                                    esp_confirmationdialogsubtitle: null,\n                                    esp_confirmationdialogcancelLabel: null,\n                                    esp_confirmationdialogconfirmLabel: null,\n                                };\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (showDialogValue === true) {\n                                targetTitle = record.esp_confirmationdialogtitle;\n                                targetText = record.esp_confirmationdialogtext;\n                                targetSubtitle = record.esp_confirmationdialogsubtitle;\n                                targetCancel = record.esp_confirmationdialogcancellabel;\n                                targetConfirm = record.esp_confirmationdialogconfirmlabel;\n                                anyEmpty = !targetTitle || !targetText || !targetSubtitle || !targetCancel || !targetConfirm;\n                                if (anyEmpty) {\n                                    updateData = {\n                                        esp_modificationneededflag: true,\n                                    };\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId_1, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _f.sent();\n                        _f.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_1 = _f.sent();\n                        console.error(\"Error in OnSaveLogic for dialog:\", error_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    OnSaveLogic.onSaveSyncSections = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, showSyncAttr, mainButtonAttr, showSyncValue, mainButtonValue, targetLookupId, filter, result, updatePromises, _i, _a, record, recordId, updateData, targetText, anyEmpty, targetType, targetText, spinnerText, successText, anyEmpty, updatePromise, error_2;\n            var _b, _c, _d, _e, _f, _g, _h;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        showSyncAttr = formContext.getAttribute(\"esp_executionmode\" /* esp_ButtonAdvancedSettingAttributes.esp_ExecutionMode */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        if (!showSyncAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        showSyncValue = showSyncAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        // 3) Deppending on esp_ExecutionMode, clear the specified fields on the current record\n                        if (showSyncValue === 0) {\n                            (_b = formContext.getAttribute(\"esp_asyncformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_AsyncFormNotificationText */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext.getAttribute(\"esp_asyncformnotification\" /* esp_ButtonAdvancedSettingAttributes.esp_AsyncFormNotification */)) === null || _c === void 0 ? void 0 : _c.setValue(false);\n                        }\n                        else if (showSyncValue === 1) {\n                            (_d = formContext.getAttribute(\"esp_syncformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncFormNotificationText */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_syncformnotification\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncFormNotification */)) === null || _e === void 0 ? void 0 : _e.setValue(false);\n                            (_f = formContext.getAttribute(\"esp_syncspinnertext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncSpinnerText */)) === null || _f === void 0 ? void 0 : _f.setValue(null);\n                            (_g = formContext.getAttribute(\"esp_syncsuccessformnotificationtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncSuccessFormNotificationText */)) === null || _g === void 0 ? void 0 : _g.setValue(null);\n                            (_h = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */)) === null || _h === void 0 ? void 0 : _h.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        filter = \"_$esp_mainbuttonsetting_value eq \".concat(targetLookupId);\n                        _j.label = 1;\n                    case 1:\n                        _j.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, Xrm.WebApi.retrieveMultipleRecords(\"esp_buttonadvancedsetting\", \"?$select=esp_AsyncFormNotificationText,esp_SyncFormNotificationText,esp_SyncSpinnerText,esp_SyncSuccessFormNotificationText,esp_SyncConfirmationBoxType,esp_ConfirmationDialogFlag&$filter=\".concat(filter))];\n                    case 2:\n                        result = _j.sent();\n                        if (!result || !result.entities || result.entities.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, _a = result.entities; _i < _a.length; _i++) {\n                            record = _a[_i];\n                            recordId = record[\"esp_buttonadvancedsettingid\"] ||\n                                record[\"esp_ButtonAdvancedSettingId\"] ||\n                                record[\"esp_buttonadvancedsettingId\"];\n                            if (!recordId) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (showSyncValue === 0) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxType: null,\n                                    esp_SyncFormNotificationText: null,\n                                    esp_SyncFormNotification: false,\n                                    esp_SyncSpinnerText: null,\n                                    esp_SyncSuccessFormNotificationText: null,\n                                };\n                                targetText = record[\"esp_AsyncFormNotificationText\"];\n                                anyEmpty = !targetText;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (showSyncValue === 1) {\n                                updateData = {\n                                    esp_AsyncFormNotificationText: null,\n                                    esp_AsyncFormNotification: false,\n                                };\n                                targetType = record[\"esp_SyncConfirmationBoxType\"];\n                                targetText = record[\"esp_SyncFormNotificationText\"];\n                                spinnerText = record[\"esp_SyncSpinnerText\"];\n                                successText = record[\"esp_SyncSuccessFormNotificationText\"];\n                                anyEmpty = !targetType || !targetText || !spinnerText || !successText;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        // 9) Execute all update operations\n                        debugger;\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _j.sent();\n                        _j.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_2 = _j.sent();\n                        console.error(\"Error in OnSaveLogic for sync/async:\", error_2);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    OnSaveLogic.onSaveBoxSections = function (executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var formContext, boxTypeAttr, mainButtonAttr, boxTypeValue, mainButtonValue, targetLookupId, filter, result, updatePromises, _i, _a, record, recordId, updateData, CboxTitle, CboxText, CboxLabel, anyEmpty, cancelLabel, confirmLabel, boxSubtitle, boxText, boxTitle, anyEmpty, updatePromise, error_3;\n            var _b, _c, _d, _e, _f, _g, _h, _j;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        formContext = executionContext.getFormContext();\n                        boxTypeAttr = formContext.getAttribute(\"esp_syncconfirmationboxtype\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxType */);\n                        mainButtonAttr = formContext.getAttribute(\"esp_mainbuttonsetting\" /* esp_ButtonAdvancedSettingAttributes.esp_MainButtonSetting */);\n                        if (!boxTypeAttr || !mainButtonAttr) {\n                            return [2 /*return*/]; // Attributes not found\n                        }\n                        boxTypeValue = boxTypeAttr.getValue();\n                        mainButtonValue = mainButtonAttr.getValue();\n                        // 3) Deppending on esp_ExecutionMode, clear the specified fields on the current record\n                        if (boxTypeValue === 0) {\n                            (_b = formContext.getAttribute(\"esp_syncconfirmationboxredirectcancellabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectCancelLabel */)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n                            (_c = formContext.getAttribute(\"esp_syncconfirmationboxredirectconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectConfirmLabel */)) === null || _c === void 0 ? void 0 : _c.setValue(null);\n                            (_d = formContext.getAttribute(\"esp_syncconfirmationboxredirectsubtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectSubtitle */)) === null || _d === void 0 ? void 0 : _d.setValue(null);\n                            (_e = formContext.getAttribute(\"esp_syncconfirmationboxredirecttext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectText */)) === null || _e === void 0 ? void 0 : _e.setValue(null);\n                            (_f = formContext.getAttribute(\"esp_syncconfirmationboxredirecttitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxRedirectTitle */)) === null || _f === void 0 ? void 0 : _f.setValue(null);\n                        }\n                        else if (boxTypeValue === 1) {\n                            (_g = formContext.getAttribute(\"esp_syncconfirmationboxconfirmlabel\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxConfirmLabel */)) === null || _g === void 0 ? void 0 : _g.setValue(null);\n                            (_h = formContext.getAttribute(\"esp_syncconfirmationboxtext\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxText */)) === null || _h === void 0 ? void 0 : _h.setValue(null);\n                            (_j = formContext.getAttribute(\"esp_syncconfirmationboxtitle\" /* esp_ButtonAdvancedSettingAttributes.esp_SyncConfirmationBoxTitle */)) === null || _j === void 0 ? void 0 : _j.setValue(null);\n                        }\n                        // 4) Ensure the lookup has a valid ID before fetching related records\n                        if (!mainButtonValue || mainButtonValue.length === 0 || !mainButtonValue[0].id) {\n                            return [2 /*return*/];\n                        }\n                        targetLookupId = mainButtonValue[0].id.replace(/[{}]/g, \"\");\n                        filter = \"_$esp_mainbuttonsetting_value eq \".concat(targetLookupId);\n                        _k.label = 1;\n                    case 1:\n                        _k.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, Xrm.WebApi.retrieveMultipleRecords(\"esp_buttonadvancedsetting\", \"?$select=esp_SyncConfirmationBoxTitle,esp_SyncConfirmationBoxText,esp_SyncConfirmationBoxConfirmLabel,esp_SyncConfirmationBoxRedirectTitle,esp_SyncConfirmationBoxRedirectText,esp_SyncConfirmationBoxRedirectSubtitle,esp_SyncConfirmationBoxRedirectCancelLabel,esp_SyncConfirmationBoxRedirectConfirmLabel&$filter=\".concat(filter))];\n                    case 2:\n                        result = _k.sent();\n                        if (!result || !result.entities || result.entities.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        updatePromises = [];\n                        for (_i = 0, _a = result.entities; _i < _a.length; _i++) {\n                            record = _a[_i];\n                            recordId = record[\"esp_buttonadvancedsettingid\"] ||\n                                record[\"esp_ButtonAdvancedSettingId\"] ||\n                                record[\"esp_buttonadvancedsettingId\"];\n                            if (!recordId) {\n                                continue;\n                            }\n                            updateData = null;\n                            // If the current record's ShowConfirmationDialog is false => clear fields on the target record\n                            if (boxTypeValue === 0) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxRedirectCancelLabel: null,\n                                    esp_SyncConfirmationBoxRedirectConfirmLabel: null,\n                                    esp_SyncConfirmationBoxRedirectSubtitle: null,\n                                    esp_SyncConfirmationBoxRedirectText: null,\n                                    esp_SyncConfirmationBoxRedirectTitle: null,\n                                };\n                                CboxTitle = record[\"esp_SyncConfirmationBoxTitle\"];\n                                CboxText = record[\"esp_SyncConfirmationBoxText\"];\n                                CboxLabel = record[\"esp_SyncConfirmationBoxConfirmLabel\"];\n                                anyEmpty = !CboxTitle || !CboxText || !CboxLabel;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            // If the current record's ShowConfirmationDialog is true => if any of these fields are empty on the target record, set esp_ModificationNeededFlag to true\n                            else if (boxTypeValue === 1) {\n                                updateData = {\n                                    esp_SyncConfirmationBoxTitle: null,\n                                    esp_SyncConfirmationBoxText: null,\n                                    esp_SyncConfirmationBoxConfirmLabel: null,\n                                };\n                                cancelLabel = record[\"esp_SyncConfirmationBoxRedirectCancelLabel\"];\n                                confirmLabel = record[\"esp_SyncConfirmationBoxRedirectConfirmLabel\"];\n                                boxSubtitle = record[\"esp_SyncConfirmationBoxRedirectSubtitle\"];\n                                boxText = record[\"esp_SyncConfirmationBoxRedirectText\"];\n                                boxTitle = record[\"esp_SyncConfirmationBoxRedirectTitle\"];\n                                anyEmpty = !cancelLabel || !confirmLabel || !boxSubtitle || !boxText || !boxTitle;\n                                if (anyEmpty) {\n                                    updateData.esp_ModificationNeededFlag = true;\n                                }\n                            }\n                            if (updateData) {\n                                updatePromise = Xrm.WebApi.updateRecord(\"esp_buttonadvancedsetting\", recordId, updateData);\n                                updatePromises.push(updatePromise);\n                            }\n                        }\n                        if (!(updatePromises.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(updatePromises)];\n                    case 3:\n                        _k.sent();\n                        _k.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_3 = _k.sent();\n                        console.error(\"Error in OnSaveLogic for sync/async:\", error_3);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    //On save functions\n    OnSaveLogic.onSave = function (executionContext) {\n        OnSaveLogic.onSaveDialogSection(executionContext);\n        OnSaveLogic.onSaveBoxSections(executionContext);\n        OnSaveLogic.onSaveSyncSections(executionContext);\n    };\n    return OnSaveLogic;\n}());\nexports.OnSaveLogic = OnSaveLogic;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LowCodeButtonAdvancedSetting.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/LowCodeButtonAdvancedSetting.ts");
/******/ 	LCB = __webpack_exports__;
/******/ 	
/******/ })()
;